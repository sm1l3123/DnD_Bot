# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω—É–∂–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
import aiohttp
import asyncio
from telebot.async_telebot import AsyncTeleBot
import json
import os
import random
import string
from telebot import types
import logging
from pydrive.auth import GoogleAuth
from pydrive.drive import GoogleDrive
import time
from datetime import datetime

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏
logging.basicConfig(level=logging.INFO)
logging.info("Bot started")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
BOT_TOKEN = os.environ.get("BOT_TOKEN")
TOGETHER_API_KEY = os.environ.get("TOGETHER_API_KEY")
DATA_FILE = "dnd_data.json"
TOGETHER_API_URL = "https://api.together.xyz/v1/chat/completions"
ADMIN_PASSWORD = "kikiriki1237"
BACKUP_FOLDER_FILE = "backup_folder_id.txt"
DATA_CHANGED = False
CAMPAIGN_BY_CODE = {}
user_states = {}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
bot = AsyncTeleBot(BOT_TOKEN)
DATA = {"users": {}, "campaigns": {}, "admins": {}, "characters": {}}
BACKUP_FOLDER_ID = None

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è Google Drive
def load_backup_folder_id():
    if os.path.exists(BACKUP_FOLDER_FILE):
        with open(BACKUP_FOLDER_FILE, "r") as f:
            return f.read().strip()
    return None

def save_backup_folder_id(folder_id):
    with open(BACKUP_FOLDER_FILE, "w") as f:
        f.write(folder_id)

def authenticate_drive():
    gauth = GoogleAuth()
    gauth.LoadCredentialsFile("mycreds.txt")
    if gauth.credentials is None:
        gauth.CommandLineAuth()
    elif gauth.access_token_expired:
        gauth.Refresh()
    else:
        gauth.Authorize()
    gauth.SaveCredentialsFile("mycreds.txt")
    return GoogleDrive(gauth)

def backup_to_drive():
    if not os.path.exists(DATA_FILE):
        logging.info("–§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ!")
        return
    drive = authenticate_drive()
    global BACKUP_FOLDER_ID
    BACKUP_FOLDER_ID = load_backup_folder_id()
    if BACKUP_FOLDER_ID is None:
        folder_metadata = {
            "title": "DnD Bot Backups",
            "mimeType": "application/vnd.google-apps.folder"
        }
        folder = drive.CreateFile(folder_metadata)
        folder.Upload()
        BACKUP_FOLDER_ID = folder["id"]
        save_backup_folder_id(BACKUP_FOLDER_ID)
        logging.info(f"–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –ø–∞–ø–∫–∞ –Ω–∞ Google Drive —Å ID: {BACKUP_FOLDER_ID}")
    else:
        logging.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–∞–ø–∫—É —Å ID: {BACKUP_FOLDER_ID}")
    timestamp = time.strftime("%Y-%m-%d_%H-%M-%S")
    backup_file_name = f"dnd_data_{timestamp}.json"
    file_metadata = {
        "title": backup_file_name,
        "parents": [{"id": BACKUP_FOLDER_ID}]
    }
    file = drive.CreateFile(file_metadata)
    file.SetContentFile(DATA_FILE)
    file.Upload()
    logging.info(f"–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è {backup_file_name} –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –Ω–∞ Google Drive!")
    try:
        file_list = drive.ListFile({'q': f"'{BACKUP_FOLDER_ID}' in parents"}).GetList()
        current_time = time.time()
        for file in file_list:
            file_time_str = file['title'].replace("dnd_data_", "").replace(".json", "")
            file_time = datetime.strptime(file_time_str, "%Y-%m-%d_%H-%M-%S")
            file_age = current_time - file_time.timestamp()
            if file_age > 24 * 3600:
                file.Delete()
                logging.info(f"–£–¥–∞–ª—ë–Ω —Å—Ç–∞—Ä—ã–π –±—ç–∫–∞–ø: {file['title']}")
    except Exception as e:
        logging.info(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –±—ç–∫–∞–ø–æ–≤: {str(e)}")

def load_data():
    global DATA, DATA_CHANGED, CAMPAIGN_BY_CODE
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r") as file:
            DATA = json.load(file)
    if "admins" not in DATA:
        DATA["admins"] = {}
    if "characters" not in DATA:
        DATA["characters"] = {}
    CAMPAIGN_BY_CODE = {c["code"]: short_name for short_name, c in DATA["campaigns"].items()}
    DATA_CHANGED = False

def save_data(force=False):
    global DATA_CHANGED
    if not DATA_CHANGED and not force:
        return
    with open(DATA_FILE, "w") as file:
        json.dump(DATA, file, indent=2)
    backup_to_drive()
    DATA_CHANGED = False

def generate_code():
    return ''.join(random.choices(string.ascii_uppercase + string.digits, k=6))

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —É—Ç–∏–ª–∏—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def generate_text(prompt, chat_id, is_dm=False, is_title=False):
    headers = {"Authorization": f"Bearer {TOGETHER_API_KEY}", "Content-Type": "application/json"}
    system_prompt = (
        "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞—ë—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –∏–∑ –¥–≤—É—Ö —Å–ª–æ–≤ (–º–∞–∫—Å–∏–º—É–º 20 —Å–∏–º–≤–æ–ª–æ–≤ —Å –Ω–æ–º–µ—Ä–æ–º) –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–º–µ—Ç–æ–∫. –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫—Ä–∞—Ç–∫–∏–º, –ª–æ–≥–∏—á–Ω—ã–º, –æ—Ç—Ä–∞–∂–∞—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è –≤ —Ç–æ–º –ø–æ—Ä—è–¥–∫–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º –æ–Ω–∏ —É–∫–∞–∑–∞–Ω—ã, –∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤—ã–¥—É–º–∞–Ω–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π. –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –∑–∞–º–µ—Ç–æ–∫, —Å–æ—Ö—Ä–∞–Ω—è—è –∏—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å."
        if is_title else
        ("–¢—ã –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ—Å–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –æ—Ç –ª–∏—Ü–∞ –≥–µ—Ä–æ—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –°–æ—Ö—Ä–∞–Ω—è–π —Å—Ç—Ä–æ–≥–∏–π –ø–æ—Ä—è–¥–æ–∫ —Å–æ–±—ã—Ç–∏–π, –∫–∞–∫ –æ–Ω–∏ —É–∫–∞–∑–∞–Ω—ã –≤ –∑–∞–º–µ—Ç–∫–∞—Ö, –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—ã–¥—É–º–∞–Ω–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π –∏–ª–∏ –ø—Ä–æ–ø—É—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π. –¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫—Ä–∞—Ç–∫–∏–º, –Ω–æ –≤–∫–ª—é—á–∞—Ç—å –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã –∏–∑ –∑–∞–º–µ—Ç–æ–∫, —Å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Å–∫–ª–æ–Ω–µ–Ω–∏—è–º–∏ –∏ —Å–≤—è–∑–Ω–æ—Å—Ç—å—é."
         if not is_dm else
         "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∫—Ä–∞—Ç–∫—É—é —Ö—Ä–æ–Ω–∏–∫—É —Å–æ–±—ã—Ç–∏–π –∫–∞–º–ø–∞–Ω–∏–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –≤ —Ç—Ä–µ—Ç—å–µ–º –ª–∏—Ü–µ. –£ —Ç–µ–±—è –µ—Å—Ç—å –∑–∞–º–µ—Ç–∫–∏ –æ—Ç —Ä–∞–∑–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤, –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ –∏—Ö –∏–º–µ–Ω–∞–º–∏ (—Ñ–æ—Ä–º–∞—Ç: '–ò–º—è: –∑–∞–º–µ—Ç–∫–∞'). –¢–≤–æ—è –∑–∞–¥–∞—á–∞: –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å —ç—Ç–∏ –∑–∞–º–µ—Ç–∫–∏ –≤ —Å–≤—è–∑–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é, —Å–æ—Ö—Ä–∞–Ω—è—è —Å—Ç—Ä–æ–≥–∏–π –ø–æ—Ä—è–¥–æ–∫ –ø–æ—è–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫ –≤ —Å–ø–∏—Å–∫–µ. –ï—Å–ª–∏ –∑–∞–º–µ—Ç–∫–∏ –ø–µ—Ä–µ—Å–µ–∫–∞—é—Ç—Å—è –∏–ª–∏ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∞—Ç, –≤—ã–±–∏—Ä–∞–π –Ω–∞–∏–±–æ–ª–µ–µ –ª–æ–≥–∏—á–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –∏ —Å–æ–µ–¥–∏–Ω—è–π –∏—Ö –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '—Ç–µ–º –≤—Ä–µ–º–µ–Ω–µ–º', '–≤ —Ç–æ –∂–µ –≤—Ä–µ–º—è', '–ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ'). –ù–µ –¥–æ–±–∞–≤–ª—è–π –≤—ã–¥—É–º–∞–Ω–Ω—ã–µ –¥–µ—Ç–∞–ª–∏, –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞–π —Å–æ–±—ã—Ç–∏—è –∏ –∏—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–º–µ—Ç–æ–∫. –¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫—Ä–∞—Ç–∫–∏–º, –Ω–æ –ø–æ–ª–Ω—ã–º, —Å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Å–∫–ª–æ–Ω–µ–Ω–∏—è–º–∏ –∏ —è—Å–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é.")
    )
    payload = {
        "model": "deepseek-ai/DeepSeek-V3",
        "messages": [{"role": "system", "content": system_prompt}, {"role": "user", "content": prompt}],
        "max_tokens": 10 if is_title else 500000,
        "temperature": 0.4,
        "top_p": 0.9,
        "stream": False
    }
    try:
        await bot.send_chat_action(chat_id, 'typing')
        async with bot.session.post(TOGETHER_API_URL, headers=headers, json=payload) as response:
            if response.status != 200:
                return f"–û—à–∏–±–∫–∞ API: {response.status}. –ó–∞–º–µ—Ç–∫–∏: {prompt}"
            data = await response.json()
            return data["choices"][0]["message"]["content"].strip()
    except aiohttp.ClientConnectorError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {str(e)}")
        return f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {str(e)}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ."
    except asyncio.TimeoutError:
        return "–û—à–∏–±–∫–∞: –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç API."
    except Exception as e:
        return f"–û—à–∏–±–∫–∞: {str(e)}. –ó–∞–º–µ—Ç–∫–∏: {prompt}"

async def send_menu(chat_id, text, buttons=None, back_to="main_menu", buttons_per_row=2):
    markup = types.InlineKeyboardMarkup()
    if buttons:
        for i in range(0, len(buttons), buttons_per_row):
            row_buttons = buttons[i:i + buttons_per_row]
            markup.add(*[types.InlineKeyboardButton(text, callback_data=data) for text, data in row_buttons])
    markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=back_to))
    await bot.send_message(chat_id, text, reply_markup=markup, parse_mode="Markdown")

async def check_access(chat_id, user_id, allow_dm_only=False, admin=False):
    if admin:
        if not await check_admin(chat_id, user_id):
            return False
    elif not await check_user(chat_id, user_id, allow_dm_only):
        return False
    return True

async def check_user(chat_id, user_id, allow_dm_only=False):
    if user_id not in DATA["users"]:
        buttons = [("üîë –í–æ–π—Ç–∏", "login"), ("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "main_menu")]
        await send_menu(chat_id, "‚ùå *–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!*", buttons, buttons_per_row=2)
        return False
    if allow_dm_only and DATA["users"][user_id]["role"] != "dm":
        buttons = [("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "main_menu")]
        await send_menu(chat_id, "üö´ *–¢–æ–ª—å–∫–æ –º–∞—Å—Ç–µ—Ä –º–æ–∂–µ—Ç —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å!*", buttons, buttons_per_row=1)
        return False
    return True

async def check_admin(chat_id, user_id):
    if user_id not in DATA["admins"] or not DATA["admins"][user_id]:
        buttons = [("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "main_menu")]
        await send_menu(chat_id, "üö´ *–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤!* –ò—Å–ø–æ–ª—å–∑—É–π /admin", buttons, buttons_per_row=1)
        return False
    return True

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@bot.message_handler(commands=['start'])
async def send_welcome(message):
    user_id = str(message.from_user.id)
    if user_id in DATA["users"]:
        buttons = [("üîë –í–æ–π—Ç–∏", "login")]
        text = "üë§ *–¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!* –í–æ–π–¥–∏:"
    else:
        buttons = [("üé≤ –ö–∞–∫ –º–∞—Å—Ç–µ—Ä", "register_dm"), ("‚öîÔ∏è –ö–∞–∫ –∏–≥—Ä–æ–∫", "register_player")]
        text = "üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!* –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è:"
    await send_menu(message.chat.id, text, buttons, buttons_per_row=2)

@bot.message_handler(commands=['admin'])
async def admin_login(message):
    user_id = str(message.from_user.id)
    user_states[user_id] = {"state": "waiting_for_admin_password"}
    await send_menu(message.chat.id, "üîí *–í–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∞:*")

@bot.message_handler(func=lambda message: str(message.from_user.id) in user_states and user_states[str(message.from_user.id)].get("state") == "waiting_for_admin_password")
async def handle_admin_password_input(message):
    global DATA_CHANGED
    user_id = str(message.from_user.id)
    if message.text.strip() == ADMIN_PASSWORD:
        DATA["admins"][user_id] = True
        DATA_CHANGED = True
        save_data()
        del user_states[user_id]
        await show_admin_panel(message.chat.id, user_id)
    else:
        del user_states[user_id]
        await send_menu(message.chat.id, "‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∞!*")

@bot.message_handler(commands=['exitadmin'])
async def admin_logout(message):
    user_id = str(message.from_user.id)
    if user_id in DATA["admins"] and DATA["admins"][user_id]:
        global DATA_CHANGED
        DATA["admins"][user_id] = False
        DATA_CHANGED = True
        save_data()
        await send_menu(message.chat.id, "üëã *–¢—ã –≤—ã—à–µ–ª –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏!*")
    else:
        await send_menu(message.chat.id, "‚ùå *–¢—ã –Ω–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏!*")

async def show_admin_panel(chat_id, user_id):
    if not await check_access(chat_id, user_id, admin=True):
        return
    buttons = [
        ("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", "admin_users"),
        ("üè∞ –ö–∞–º–ø–∞–Ω–∏–∏", "admin_campaigns"),
        ("üö™ –í—ã–π—Ç–∏", "admin_exit")
    ]
    text = (
        "# ‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n"
        "*–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!* –ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?"
    )
    await send_menu(chat_id, text, buttons, buttons_per_row=3)

@bot.callback_query_handler(func=lambda call: call.data.startswith("admin_"))
async def handle_admin_commands(call):
    user_id = str(call.from_user.id)
    if not await check_access(call.message.chat.id, user_id, admin=True):
        return
    parts = call.data.split("|")
    command = parts[0].replace("admin_", "")
    if command == "users":
        await show_users_panel(call.message.chat.id, user_id)
    elif command == "campaigns":
        await show_campaigns_panel(call.message.chat.id, user_id)
    elif command == "exit":
        global DATA_CHANGED
        DATA["admins"][user_id] = False
        DATA_CHANGED = True
        save_data()
        await send_menu(call.message.chat.id, "üëã *–¢—ã –≤—ã—à–µ–ª –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏!*")
    elif command == "panel":
        await show_admin_panel(call.message.chat.id, user_id)
    elif command == "user_details" and len(parts) > 1:
        await show_user_details(call.message.chat.id, user_id, parts[1])
    elif command == "reset_password" and len(parts) > 1:
        await reset_password_prompt(call.message.chat.id, user_id, parts[1])
    elif command == "delete_user" and len(parts) > 1:
        await delete_user(call.message.chat.id, user_id, parts[1])
    elif command == "campaign_details" and len(parts) > 1:
        await show_campaign_details(call.message.chat.id, user_id, parts[1])
    elif command == "delete_campaign" and len(parts) > 1:
        await delete_campaign(call.message.chat.id, user_id, parts[1])

async def show_users_panel(chat_id, user_id):
    if not await check_access(chat_id, user_id, admin=True):
        return
    text = "# üë§ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
    buttons = []
    for uid, user in DATA["users"].items():
        characters = [c["name"] for c in DATA["characters"].values() if c["owner"] == uid]
        text += f"- **ID:** {uid} | **–ò–º—è:** {user['name']} | **–†–æ–ª—å:** {'–º–∞—Å—Ç–µ—Ä' if user['role'] == 'dm' else '–∏–≥—Ä–æ–∫'} | **–ü–µ—Ä—Å–æ–Ω–∞–∂–∏:** {', '.join(characters) or '–Ω–µ—Ç'}\n"
        buttons.append((f"üë§ {user['name']}", f"admin_user_details|{uid}"))
    await send_menu(chat_id, text, buttons, back_to="admin_panel", buttons_per_row=2)

async def show_user_details(chat_id, user_id, target_uid):
    if not await check_access(chat_id, user_id, admin=True):
        return
    user = DATA["users"].get(target_uid, {})
    if not user:
        await send_menu(chat_id, "‚ùå *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!*", back_to="admin_users")
        return
    characters = [(cid, c["name"], c.get("backstory", "–ù–µ—Ç –ø—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏–∏")) for cid, c in DATA["characters"].items() if c["owner"] == target_uid]
    campaigns = [c["full_name"] for c in DATA["campaigns"].values() if any(char_id in c["players"] for char_id, _, _ in characters)]
    text = (
        f"# üë§ –î–µ—Ç–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        f"**ID:** {target_uid}\n"
        f"**–ò–º—è:** {user['name']}\n"
        f"**–†–æ–ª—å:** {'–º–∞—Å—Ç–µ—Ä' if user['role'] == 'dm' else '–∏–≥—Ä–æ–∫'}\n"
        f"**–ü–∞—Ä–æ–ª—å:** {user['password']}\n"
        f"**–ü–µ—Ä—Å–æ–Ω–∞–∂–∏:**\n" + "\n".join(f"- *{name}* (ID: {cid})\n  –ü—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏—è: _{backstory}_" for cid, name, backstory in characters) + "\n"
        f"**–ö–∞–º–ø–∞–Ω–∏–∏:** {', '.join(campaigns) or '–Ω–µ—Ç'}"
    )
    buttons = [
        ("üîë –°–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å", f"admin_reset_password|{target_uid}"),
        ("üóë –£–¥–∞–ª–∏—Ç—å", f"admin_delete_user|{target_uid}")
    ]
    await send_menu(chat_id, text, buttons, back_to="admin_users", buttons_per_row=2)

async def reset_password_prompt(chat_id, user_id, target_uid):
    if not await check_access(chat_id, user_id, admin=True):
        return
    user_states[user_id] = {"state": "waiting_for_reset_password", "data": {"target_uid": target_uid}}
    await send_menu(chat_id,
                    f"üîë *–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è {DATA['users'][target_uid]['name']}:*",
                    back_to=f"admin_user_details|{target_uid}")

@bot.message_handler(func=lambda message: str(message.from_user.id) in user_states and user_states[str(message.from_user.id)].get("state") == "waiting_for_reset_password")
async def reset_password_input(message):
    global DATA_CHANGED
    user_id = str(message.from_user.id)
    if not await check_access(message.chat.id, user_id, admin=True):
        del user_states[user_id]
        return
    target_uid = user_states[user_id]["data"]["target_uid"]
    new_password = message.text.strip()
    if not new_password:
        await send_menu(message.chat.id, "‚ùå *–ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!*", back_to=f"admin_user_details|{target_uid}")
        del user_states[user_id]
        return
    DATA["users"][target_uid]["password"] = new_password
    DATA_CHANGED = True
    await send_menu(message.chat.id, f"‚úÖ –ü–∞—Ä–æ–ª—å –¥–ª—è *{DATA['users'][target_uid]['name']}* —Å–±—Ä–æ—à–µ–Ω –Ω–∞ `{new_password}`!", back_to=f"admin_user_details|{target_uid}")
    del user_states[user_id]

async def delete_user(chat_id, user_id, target_uid):
    global DATA_CHANGED
    if not await check_access(chat_id, user_id, admin=True):
        return
    if target_uid not in DATA["users"]:
        await send_menu(chat_id, "‚ùå *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!*", back_to="admin_users")
        return
    user_name = DATA["users"][target_uid]["name"]
    for campaign in DATA["campaigns"].values():
        for char_id in list(campaign["players"]):
            if DATA["characters"][char_id]["owner"] == target_uid:
                campaign["players"].remove(char_id)
    for char_id in list(DATA["characters"].keys()):
        if DATA["characters"][char_id]["owner"] == target_uid:
            del DATA["characters"][char_id]
    del DATA["users"][target_uid]
    if target_uid in DATA["admins"]:
        del DATA["admins"][target_uid]
    DATA_CHANGED = True
    await send_menu(chat_id, f"üóë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å *{user_name}* —É–¥–∞–ª—ë–Ω!", back_to="admin_users")

async def show_campaigns_panel(chat_id, user_id):
    if not await check_access(chat_id, user_id, admin=True):
        return
    text = "# üè∞ –°–ø–∏—Å–æ–∫ –∫–∞–º–ø–∞–Ω–∏–π\n"
    buttons = []
    for short_name, camp in DATA["campaigns"].items():
        players = [DATA["characters"][pid]["name"] for pid in camp["players"]]
        text += f"- **{short_name}** | –ü–æ–ª–Ω–æ–µ: _{camp['full_name']}_\n  –°–æ–∑–¥–∞—Ç–µ–ª—å: {DATA['users'][camp['creator']]['name']} | –£—á–∞—Å—Ç–Ω–∏–∫–∏: {', '.join(players) or '–Ω–µ—Ç'}\n"
        buttons.append((f"üè∞ {short_name}", f"admin_campaign_details|{short_name}"))
    await send_menu(chat_id, text, buttons, back_to="admin_panel", buttons_per_row=2)

async def show_campaign_details(chat_id, user_id, short_name):
    if not await check_access(chat_id, user_id, admin=True):
        return
    camp = DATA["campaigns"].get(short_name, {})
    if not camp:
        await send_menu(chat_id, "‚ùå *–ö–∞–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!*", back_to="admin_campaigns")
        return
    players = [f"{DATA['characters'][pid]['name']} (–≤–ª–∞–¥–µ–ª–µ—Ü: {DATA['users'][DATA['characters'][pid]['owner']]['name']})" for pid in camp["players"]]
    sessions = camp["sessions"]
    text = (
        f"# üè∞ –î–µ—Ç–∞–ª–∏ –∫–∞–º–ø–∞–Ω–∏–∏\n"
        f"**–ö—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:** {short_name}\n"
        f"**–ü–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:** _{camp['full_name']}_\n"
        f"**–°–æ–∑–¥–∞—Ç–µ–ª—å:** {DATA['users'][camp['creator']]['name']} (ID: {camp['creator']})\n"
        f"**–ö–æ–¥:** `{camp['code']}`\n"
        f"**–£—á–∞—Å—Ç–Ω–∏–∫–∏:**\n" + "\n".join(f"- {p}" for p in players) or "–Ω–µ—Ç" + "\n"
        f"**–°–µ—Å—Å–∏–π:** {len(sessions)}\n"
        f"**–ê–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è:** {'–¥–∞' if any(s['active'] for s in sessions.values()) else '–Ω–µ—Ç'}"
    )
    buttons = [("üóë –£–¥–∞–ª–∏—Ç—å", f"admin_delete_campaign|{short_name}")]
    await send_menu(chat_id, text, buttons, back_to="admin_campaigns", buttons_per_row=1)

async def delete_campaign(chat_id, user_id, short_name):
    global DATA_CHANGED, CAMPAIGN_BY_CODE
    if not await check_access(chat_id, user_id, admin=True):
        return
    if short_name not in DATA["campaigns"]:
        await send_menu(chat_id, "‚ùå *–ö–∞–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!*", back_to="admin_campaigns")
        return
    code = DATA["campaigns"][short_name]["code"]
    full_name = DATA["campaigns"][short_name]["full_name"]
    for char_id in DATA["campaigns"][short_name]["players"]:
        DATA["characters"][char_id]["campaigns"].remove(short_name)
    del DATA["campaigns"][short_name]
    del CAMPAIGN_BY_CODE[code]
    DATA_CHANGED = True
    await send_menu(chat_id, f"üóë –ö–∞–º–ø–∞–Ω–∏—è *{full_name}* —É–¥–∞–ª–µ–Ω–∞!", back_to="admin_campaigns")

@bot.callback_query_handler(func=lambda call: call.data in ["register_dm", "register_player"])
async def handle_register_choice(call):
    user_id = str(call.from_user.id)
    if user_id in DATA["users"]:
        buttons = [("üîë –í–æ–π—Ç–∏", "login")]
        await send_menu(call.message.chat.id, "üë§ *–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!*", buttons)
        return
    role = "dm" if call.data == "register_dm" else "player"
    user_states[user_id] = {"state": "waiting_for_registration", "data": {"role": role}}
    await send_menu(call.message.chat.id,
                    "üìù *–í–≤–µ–¥–∏ –∏–º—è –∏ –ø–∞—Ä–æ–ª—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ò–º—è –ü–∞—Ä–æ–ª—å*\n–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω pass123")

@bot.message_handler(func=lambda message: str(message.from_user.id) in user_states and user_states[str(message.from_user.id)].get("state") == "waiting_for_registration")
async def register_user_input(message):
    global DATA_CHANGED
    user_id = str(message.from_user.id)
    role = user_states[user_id]["data"]["role"]
    try:
        name, password = message.text.split(" ", 1)
        if not (name and password):
            raise ValueError
        DATA["users"][user_id] = {
            "role": role,
            "name": name,
            "password": password
        }
        DATA_CHANGED = True
        buttons = [("üîë –í–æ–π—Ç–∏", "login")]
        await send_menu(message.chat.id, f"‚úÖ –¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ *{'–º–∞—Å—Ç–µ—Ä' if role == 'dm' else '–∏–≥—Ä–æ–∫'}*, {name}!\n*–¢–µ–ø–µ—Ä—å –≤–æ–π–¥–∏.*", buttons)
    except ValueError:
        await send_menu(message.chat.id, "‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!* –í–≤–µ–¥–∏: –ò–º—è –ü–∞—Ä–æ–ª—å")
    finally:
        del user_states[user_id]

@bot.callback_query_handler(func=lambda call: call.data == "login")
async def ask_login(call):
    user_id = str(call.from_user.id)
    if user_id not in DATA["users"]:
        buttons = [("üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", "start")]
        await send_menu(call.message.chat.id, "‚ùå *–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!* –ù–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ:", buttons)
        return
    user_states[user_id] = {"state": "waiting_for_login_password"}
    await send_menu(call.message.chat.id, "üîí *–í–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞:*")

@bot.message_handler(func=lambda message: str(message.from_user.id) in user_states and user_states[str(message.from_user.id)].get("state") == "waiting_for_login_password")
async def login_user_input(message):
    user_id = str(message.from_user.id)
    if user_id not in DATA["users"]:
        await send_menu(message.chat.id, "‚ùå *–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!* –ù–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ: /start")
        del user_states[user_id]
        return
    if DATA["users"][user_id]["password"] != message.text.strip():
        buttons = [("üîÑ –°–Ω–æ–≤–∞", "login")]
        await send_menu(message.chat.id, "‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!*", buttons)
        del user_states[user_id]
        return
    del user_states[user_id]
    await show_main_menu(message.chat.id, user_id)

@bot.message_handler(commands=['newcharacter'])
async def ask_new_character(message):
    user_id = str(message.from_user.id)
    if not await check_access(message.chat.id, user_id):
        return
    user_states[user_id] = {"state": "waiting_for_character_name"}
    await send_menu(message.chat.id, "üßô‚Äç‚ôÇÔ∏è *–í–≤–µ–¥–∏ –∏–º—è —Å–≤–æ–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:*")

@bot.message_handler(func=lambda message: str(message.from_user.id) in user_states and user_states[str(message.from_user.id)].get("state") == "waiting_for_character_name")
async def create_character_name_input(message):
    global DATA_CHANGED
    user_id = str(message.from_user.id)
    name = message.text.strip()
    if not name:
        await send_menu(message.chat.id, "‚ùå *–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!*")
        del user_states[user_id]
        return
    character_id = f"char_{len(DATA['characters']) + 1}"
    user_states[user_id] = {"state": "waiting_for_character_backstory", "data": {"character_id": character_id, "name": name}}
    await send_menu(message.chat.id, f"üßô‚Äç‚ôÇÔ∏è –ü–µ—Ä—Å–æ–Ω–∞–∂ *{name}* (ID: `{character_id}`) —Å–æ–∑–¥–∞–Ω!\n*–í–≤–µ–¥–∏ –ø—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏—é (–∏–ª–∏ –Ω–∞–ø–∏—à–∏ '–Ω–µ—Ç', —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):*")

@bot.message_handler(func=lambda message: str(message.from_user.id) in user_states and user_states[str(message.from_user.id)].get("state") == "waiting_for_character_backstory")
async def create_character_backstory_input(message):
    global DATA_CHANGED
    user_id = str(message.from_user.id)
    character_id = user_states[user_id]["data"]["character_id"]
    name = user_states[user_id]["data"]["name"]
    backstory = message.text.strip()
    if backstory.lower() == "–Ω–µ—Ç":
        backstory = "–ü—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
    DATA["characters"][character_id] = {
        "name": name,
        "owner": user_id,
        "campaigns": [],
        "backstory": backstory
    }
    DATA_CHANGED = True
    buttons = [("üìú –ü—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏—è", f"show_character|{character_id}"), ("üè∞ –ö–∞–º–ø–∞–Ω–∏–∏", "join_campaign")]
    await send_menu(message.chat.id, f"‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–∂ *{name}* —Å–æ–∑–¥–∞–Ω —Å ID: `{character_id}`!", buttons, buttons_per_row=2)
    del user_states[user_id]

@bot.callback_query_handler(func=lambda call: call.data.startswith("show_character|"))
async def show_character(call):
    user_id = str(call.from_user.id)
    parts = call.data.split("|")
    if len(parts) < 2:
        await send_menu(call.message.chat.id, "‚ùå *–û—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ!*")
        return
    character_id = parts[1]
    if character_id not in DATA["characters"] or DATA["characters"][character_id]["owner"] != user_id:
        await send_menu(call.message.chat.id, "üö´ *–≠—Ç–æ –Ω–µ —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–∂!*")
        return
    char = DATA["characters"][character_id]
    text = (
        f"üßô‚Äç‚ôÇÔ∏è # –ü–µ—Ä—Å–æ–Ω–∞–∂: {char['name']}\n"
        f"ID: `{character_id}`\n"
        f"–ü—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏—è: _{char['backstory']}_\n"
        f"–ö–∞–º–ø–∞–Ω–∏–∏:\n" + "\n".join(f"- {DATA['campaigns'][c]['full_name']}" for c in char['campaigns']) or "–Ω–µ—Ç"
    )
    buttons = [(f"üè∞ {DATA['campaigns'][c]['short_name']}", f"history|{c}") for c in char["campaigns"]]
    buttons.append(("ü§ù –í—Å—Ç—É–ø–∏—Ç—å –≤ –Ω–æ–≤—É—é", "join_campaign"))
    await send_menu(call.message.chat.id, text, buttons, buttons_per_row=2)

async def show_main_menu(chat_id, user_id):
    role, name = DATA["users"][user_id]["role"], DATA["users"][user_id]["name"]
    buttons = []
    if role == "dm":
        campaigns = [(c["short_name"], c["full_name"]) for c in DATA["campaigns"].values() if c["creator"] == user_id]
        text = (
            f"üëã # –ü—Ä–∏–≤–µ—Ç, *{name}*!\n"
            f"–¢—ã –≤–æ—à—ë–ª –∫–∞–∫ *–º–∞—Å—Ç–µ—Ä*.\n"
            f"–¢–≤–æ–∏ –∫–∞–º–ø–∞–Ω–∏–∏: **{', '.join(n for _, n in campaigns) or '–Ω–µ—Ç –∫–∞–º–ø–∞–Ω–∏–π'}**\n"
            f"–ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?"
        )
        for short_name, _ in campaigns:
            buttons.append((f"üè∞ '{short_name}'", f"manage_campaign|{short_name}"))
        buttons.extend([("‚ûï –ù–æ–≤–∞—è", "new_campaign"), ("‚öîÔ∏è –ö–∞–∫ –∏–≥—Ä–æ–∫", "join_campaign"), ("üßô‚Äç‚ôÇÔ∏è –ü–µ—Ä—Å–æ–Ω–∞–∂", "/newcharacter")])
        await send_menu(chat_id, text, buttons, buttons_per_row=2)
    else:
        characters = [(cid, c["name"], c["campaigns"]) for cid, c in DATA["characters"].items() if c["owner"] == user_id]
        text = (
            f" üëã –ü—Ä–∏–≤–µ—Ç, *{name}*!\n"
            f"*–¢—ã –≤–æ—à—ë–ª –∫–∞–∫ –∏–≥—Ä–æ–∫.*\n"
            f"**–¢–≤–æ–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏:**\n"
        )
        if characters:
            for cid, char_name, campaigns in characters:
                text += f"- *{char_name}*: {', '.join(DATA['campaigns'][c]['full_name'] for c in campaigns) or '–±–µ–∑ –∫–∞–º–ø–∞–Ω–∏–π'}\n"
            buttons = [(f"üìú {char_name}", f"show_character|{cid}") for cid, char_name, _ in characters]
        else:
            text += "*–ù–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π.*\n"
        buttons.extend([("ü§ù –í—Å—Ç—É–ø–∏—Ç—å", "join_campaign"), ("üßô‚Äç‚ôÇÔ∏è –ù–æ–≤—ã–π", "/newcharacter")])
        await send_menu(chat_id, text, buttons, buttons_per_row=2)

@bot.callback_query_handler(func=lambda call: call.data == "new_campaign")
async def ask_new_campaign(call):
    user_id = str(call.from_user.id)
    if not await check_access(call.message.chat.id, user_id, allow_dm_only=True):
        return
    user_states[user_id] = {"state": "waiting_for_campaign_name"}
    await send_menu(call.message.chat.id,
                    "üìù *–í–≤–µ–¥–∏ –∫—Ä–∞—Ç–∫–æ–µ (–¥–æ 16 —Å–∏–º–≤–æ–ª–æ–≤) –∏ –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:*\n–ü—Ä–∏–º–µ—Ä: –¢–µ—Å—Ç –û—á–µ–Ω—å –î–ª–∏–Ω–Ω–æ–µ –ù–∞–∑–≤–∞–Ω–∏–µ –ö–∞–º–ø–∞–Ω–∏–∏")

@bot.message_handler(func=lambda message: str(message.from_user.id) in user_states and user_states[str(message.from_user.id)].get("state") == "waiting_for_campaign_name")
async def create_campaign_input(message):
    global DATA_CHANGED, CAMPAIGN_BY_CODE
    user_id = str(message.from_user.id)
    if not await check_access(message.chat.id, user_id):
        del user_states[user_id]
        return
    try:
        short_name, *full_name_parts = message.text.split()
        full_name = " ".join(full_name_parts)
        if not (short_name and full_name and len(short_name) <= 16 and short_name not in DATA["campaigns"]):
            raise ValueError
        code = generate_code()
        DATA["campaigns"][short_name] = {
            "creator": user_id,
            "code": code,
            "players": [],
            "sessions": {},
            "short_name": short_name,
            "full_name": full_name
        }
        CAMPAIGN_BY_CODE[code] = short_name
        DATA_CHANGED = True
        buttons = [(f"üè∞ '{short_name}'", f"manage_campaign|{short_name}")]
        await send_menu(message.chat.id, f"‚úÖ –ö–∞–º–ø–∞–Ω–∏—è *{full_name}* —Å–æ–∑–¥–∞–Ω–∞!\n**–ö–æ–¥:** `{code}`", buttons)
    except ValueError:
        await send_menu(message.chat.id, "‚ùå *–í–≤–µ–¥–∏ –∫—Ä–∞—Ç–∫–æ–µ (–¥–æ 16 —Å–∏–º–≤–æ–ª–æ–≤) –∏ –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, –∫—Ä–∞—Ç–∫–æ–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º!*\n–ü—Ä–∏–º–µ—Ä: –¢–µ—Å—Ç –û—á–µ–Ω—å –î–ª–∏–Ω–Ω–æ–µ –ù–∞–∑–≤–∞–Ω–∏–µ")
    finally:
        del user_states[user_id]

@bot.callback_query_handler(func=lambda call: call.data == "join_campaign")
async def ask_join_campaign(call):
    user_id = str(call.from_user.id)
    if not await check_access(call.message.chat.id, user_id):
        return
    characters = [(cid, c["name"]) for cid, c in DATA["characters"].items() if c["owner"] == user_id]
    if not characters:
        await send_menu(call.message.chat.id, "‚ùå *–£ —Ç–µ–±—è –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π!* –°–æ–∑–¥–∞–π –æ–¥–Ω–æ–≥–æ —Å –ø–æ–º–æ—â—å—é /newcharacter")
        return
    user_states[user_id] = {"state": "waiting_for_campaign_code"}
    await send_menu(call.message.chat.id, "üîë *–í–≤–µ–¥–∏ –∫–æ–¥ –∫–∞–º–ø–∞–Ω–∏–∏:*")

@bot.message_handler(func=lambda message: str(message.from_user.id) in user_states and user_states[str(message.from_user.id)].get("state") == "waiting_for_campaign_code")
async def join_campaign_input(message):
    global DATA_CHANGED
    user_id = str(message.from_user.id)
    if not await check_access(message.chat.id, user_id):
        del user_states[user_id]
        return
    code = message.text.strip()
    short_name = CAMPAIGN_BY_CODE.get(code)
    if not short_name:
        await send_menu(message.chat.id, "‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥!*")
        del user_states[user_id]
        return
    characters = [(cid, c["name"]) for cid, c in DATA["characters"].items() if c["owner"] == user_id]
    buttons = [(name, f"join_with_char|{short_name}|{cid}") for cid, name in characters]
    user_states[user_id] = {"state": "waiting_for_character_selection", "data": {"short_name": short_name}}
    await send_menu(message.chat.id, "üßô‚Äç‚ôÇÔ∏è *–í—ã–±–µ—Ä–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –∫–∞–º–ø–∞–Ω–∏—é:*", buttons, buttons_per_row=2)

@bot.callback_query_handler(func=lambda call: call.data.startswith("join_with_char|"))
async def join_with_character(call):
    user_id = str(call.from_user.id)
    parts = call.data.split("|")
    if len(parts) < 3:
        await send_menu(call.message.chat.id, "‚ùå *–û—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ!*")
        return
    short_name, character_id = parts[1], parts[2]
    if user_id not in user_states or user_states[user_id].get("state") != "waiting_for_character_selection":
        await send_menu(call.message.chat.id, "‚ùå *–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞, –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞!*")
        return
    if character_id not in DATA["characters"] or DATA["characters"][character_id]["owner"] != user_id:
        await send_menu(call.message.chat.id, "üö´ *–≠—Ç–æ –Ω–µ —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–∂!*")
        return
    DATA["campaigns"][short_name]["players"].append(character_id)
    DATA["characters"][character_id]["campaigns"].append(short_name)
    global DATA_CHANGED
    DATA_CHANGED = True
    buttons = [
        ("üìú –ò—Å—Ç–æ—Ä–∏—è", f"history|{short_name}"),
        ("üö™ –í—ã–π—Ç–∏", "leave_campaign")
    ]
    await send_menu(call.message.chat.id, f"‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–∂ *{DATA['characters'][character_id]['name']}* –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ *{DATA['campaigns'][short_name]['full_name']}*!", buttons, buttons_per_row=2)
    del user_states[user_id]

@bot.callback_query_handler(func=lambda call: call.data == "leave_campaign")
async def leave_campaign(call):
    global DATA_CHANGED
    user_id = str(call.from_user.id)
    if not await check_access(call.message.chat.id, user_id):
        return
    characters = [cid for cid, c in DATA["characters"].items() if c["owner"] == user_id]
    campaign = next((n for n, c in DATA["campaigns"].items() if any(char_id in c["players"] for char_id in characters)), None)
    if not campaign:
        await send_menu(call.message.chat.id, "üè∞ *–£ —Ç–µ–±—è –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –≤ –∫–∞–º–ø–∞–Ω–∏—è—Ö!*")
        return
    char_in_campaign = next(char_id for char_id in characters if char_id in DATA["campaigns"][campaign]["players"])
    DATA["campaigns"][campaign]["players"].remove(char_in_campaign)
    DATA["characters"][char_in_campaign]["campaigns"].remove(campaign)
    DATA_CHANGED = True
    await show_main_menu(call.message.chat.id, user_id)

@bot.callback_query_handler(func=lambda call: call.data.startswith("manage_campaign|"))
async def manage_campaign(call):
    user_id, short_name = str(call.from_user.id), call.data.split("|")[1]
    if not await check_access(call.message.chat.id, user_id) or short_name not in DATA["campaigns"] or DATA["campaigns"][short_name]["creator"] != user_id:
        await send_menu(call.message.chat.id, "üö´ *–¢—ã –Ω–µ —Å–æ–∑–¥–∞—Ç–µ–ª—å —ç—Ç–æ–π –∫–∞–º–ø–∞–Ω–∏–∏!*")
        return
    full_name = DATA["campaigns"][short_name]["full_name"]
    buttons = [
        ("‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å", f"start_session|{short_name}"),
        ("‚èπ –ó–∞–≤–µ—Ä—à–∏—Ç—å", f"end_session|{short_name}"),
        ("üóë –£–¥–∞–ª–∏—Ç—å", f"delete_session|{short_name}"),
        ("üìú –ò—Å—Ç–æ—Ä–∏—è", f"dm_history|{short_name}"),
        ("üé• –ü–æ—Å–ª–µ–¥–Ω–∏–µ", f"last_sessions_dm|{short_name}"),
        ("üîë –ö–æ–¥", f"show_code|{short_name}")
    ]
    text = f"# üè∞ –ö–∞–º–ø–∞–Ω–∏—è: *{full_name}*\n*–ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?*"
    await send_menu(call.message.chat.id, text, buttons, buttons_per_row=3)

@bot.callback_query_handler(func=lambda call: call.data.startswith("show_code|"))
async def show_code(call):
    user_id, short_name = str(call.from_user.id), call.data.split("|")[1]
    if not await check_access(call.message.chat.id, user_id) or short_name not in DATA["campaigns"] or DATA["campaigns"][short_name]["creator"] != user_id:
        await send_menu(call.message.chat.id, "üö´ *–¢—ã –Ω–µ —Å–æ–∑–¥–∞—Ç–µ–ª—å —ç—Ç–æ–π –∫–∞–º–ø–∞–Ω–∏–∏!*")
        return
    buttons = [("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", f"manage_campaign|{short_name}")]
    text = f"üîë –ö–æ–¥ –∫–∞–º–ø–∞–Ω–∏–∏ *{DATA['campaigns'][short_name]['full_name']}*: `**{DATA['campaigns'][short_name]['code']}**`"
    await send_menu(call.message.chat.id, text, buttons, back_to=f"manage_campaign|{short_name}", buttons_per_row=1)

@bot.callback_query_handler(func=lambda call: call.data.startswith("start_session|"))
async def start_session(call):
    user_id = str(call.from_user.id)
    parts = call.data.split("|")
    if len(parts) < 2:
        await send_menu(call.message.chat.id, "‚ùå *–û—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ!*")
        return
    short_name = parts[1]
    if not await check_access(call.message.chat.id, user_id) or short_name not in DATA["campaigns"] or DATA["campaigns"][short_name]["creator"] != user_id:
        await send_menu(call.message.chat.id, "üö´ *–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å —Å–µ—Å—Å–∏—é!*")
        return
    sessions = DATA["campaigns"][short_name]["sessions"]
    if any(s["active"] for s in sessions.values()):
        buttons = [("‚èπ –ó–∞–≤–µ—Ä—à–∏—Ç—å", f"end_session|{short_name}")]
        await send_menu(call.message.chat.id, "‚è≥ *–£–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è!*", buttons, back_to=f"manage_campaign|{short_name}", buttons_per_row=1)
        return
    session_num = len(sessions) + 1
    session_name = f"–°–µ—Å—Å–∏—è {session_num}"
    sessions[session_name] = {"active": True, "notes": {}, "player_histories": {}}
    global DATA_CHANGED
    DATA_CHANGED = True
    full_name = DATA["campaigns"][short_name]["full_name"]
    buttons = [("‚èπ –ó–∞–≤–µ—Ä—à–∏—Ç—å", f"end_session|{short_name}")]
    await send_menu(call.message.chat.id, f"‚ñ∂Ô∏è –°–µ—Å—Å–∏—è *{session_name}* –≤ *{full_name}* –Ω–∞—á–∞–ª–∞—Å—å!", buttons, back_to=f"manage_campaign|{short_name}", buttons_per_row=1)
    for char_id in DATA["campaigns"][short_name]["players"]:
        player_id = DATA["characters"][char_id]["owner"]
        buttons = [("üìù –ó–∞–º–µ—Ç–∫–∏", f"start_adding_notes|{short_name}|{session_num}")]
        await send_menu(player_id, f"‚ñ∂Ô∏è –°–µ—Å—Å–∏—è *{session_name}* –≤ –∫–∞–º–ø–∞–Ω–∏–∏ *{full_name}* –Ω–∞—á–∞–ª–∞—Å—å!\n–î–æ–±–∞–≤–ª—è–π –∑–∞–º–µ—Ç–∫–∏ –∑–∞ *{DATA['characters'][char_id]['name']}*:", buttons, buttons_per_row=1)

@bot.callback_query_handler(func=lambda call: call.data.startswith("end_session|"))
async def end_session(call):
    user_id = str(call.from_user.id)
    chat_id = call.message.chat.id
    parts = call.data.split("|")
    if len(parts) < 2:
        await send_menu(chat_id, "‚ùå *–û—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ!*")
        return
    short_name = parts[1]
    if not await check_access(chat_id, user_id) or short_name not in DATA["campaigns"] or DATA["campaigns"][short_name]["creator"] != user_id:
        await send_menu(chat_id, "üö´ *–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é!*")
        return
    sessions = DATA["campaigns"][short_name]["sessions"]
    active_session = next((s for s, d in sessions.items() if d["active"]), None)
    if not active_session:
        await send_menu(chat_id, "‚è≥ *–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏!*", back_to=f"manage_campaign|{short_name}")
        return
    all_notes = [f"{DATA['users'].get(DATA['characters'][char_id]['owner'], {}).get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')}: {note}"
                 for char_id in DATA["campaigns"][short_name]["players"]
                 for note in sessions[active_session]["notes"].get(char_id, [])]
    if not all_notes:
        buttons = [("‚úÖ –î–∞", f"delete_empty_session|{short_name}|{active_session}"), ("‚ùå –ù–µ—Ç", f"manage_campaign|{short_name}")]
        await send_menu(chat_id, f"üì≠ –°–µ—Å—Å–∏—è *{active_session}* –ø—É—Å—Ç–∞—è. –£–¥–∞–ª–∏—Ç—å –µ—ë?", buttons, back_to=f"manage_campaign|{short_name}", buttons_per_row=2)
        return
    session_num = int(active_session.split()[1])
    new_title = await generate_text(f"–°–æ–∑–¥–∞–π –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ –¥–≤—É—Ö —Å–ª–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–º–µ—Ç–æ–∫: {'; '.join(all_notes)}", chat_id, is_title=True)
    new_session_name = f"{new_title} ({session_num})"
    history = await generate_text(f"–°–æ—Å—Ç–∞–≤—å –∫—Ä–∞—Ç–∫—É—é —Ö—Ä–æ–Ω–∏–∫—É —Å–æ–±—ã—Ç–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–º–µ—Ç–æ–∫, –±–µ–∑ –≤—ã–¥—É–º–æ–∫:\n{' '.join(all_notes)}", chat_id, is_dm=True)
    sessions[new_session_name] = sessions.pop(active_session)
    sessions[new_session_name]["active"] = False
    global DATA_CHANGED
    DATA_CHANGED = True
    save_data()
    buttons = [
        ("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", f"save_history|{short_name}|{session_num}"),
        ("üîÑ –ü–µ—Ä–µ–ø–∏—Å–∞—Ç—å", f"rewrite_history|{short_name}|{session_num}"),
        ("üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", f"regenerate_title|{short_name}|{session_num}")
    ]
    text = (
        f"‚èπ # –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n"
        f"–ù–∞–∑–≤–∞–Ω–∞ {new_session_name} –≤ {DATA['campaigns'][short_name]['full_name']}:\n"
        f"_{history}_\n"
        f"–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç–æ—Ç –ø–µ—Ä–µ—Å–∫–∞–∑ –∏–ª–∏ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ?"
    )
    await send_menu(chat_id, text, buttons, back_to=f"manage_campaign|{short_name}", buttons_per_row=2)

@bot.callback_query_handler(func=lambda call: call.data.startswith("regenerate_title|"))
async def regenerate_title(call):
    user_id = str(call.from_user.id)
    chat_id = call.message.chat.id
    parts = call.data.split("|")
    if len(parts) < 3:
        await send_menu(chat_id, "‚ùå *–û—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ!*")
        return
    short_name, session_num = parts[1], parts[2]
    if not await check_access(chat_id, user_id) or short_name not in DATA["campaigns"] or DATA["campaigns"][short_name]["creator"] != user_id:
        await send_menu(chat_id, "üö´ *–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ!*")
        return
    sessions = DATA["campaigns"][short_name]["sessions"]
    session_name = next((s for s in sessions if s.endswith(f"({session_num})")), None)
    if not session_name or sessions[session_name]["active"]:
        await send_menu(chat_id, "‚ùå *–°–µ—Å—Å–∏—è –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!*", back_to=f"manage_campaign|{short_name}")
        return
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–º–µ—Ç–∫–∏ –∏–ª–∏ –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    if "notes" in sessions[session_name]:
        all_notes = [f"{DATA['users'].get(DATA['characters'][char_id]['owner'], {}).get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')}: {note}"
                     for char_id in DATA["campaigns"][short_name]["players"]
                     for note in sessions[session_name]["notes"].get(char_id, [])]
        new_title = await generate_text(f"–°–æ–∑–¥–∞–π –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ –¥–≤—É—Ö —Å–ª–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–º–µ—Ç–æ–∫: {'; '.join(all_notes)}", chat_id, is_title=True)
    elif "history" in sessions[session_name]:
        new_title = await generate_text(f"–°–æ–∑–¥–∞–π –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ –¥–≤—É—Ö —Å–ª–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–∞: {sessions[session_name]['history']}", chat_id, is_title=True)
    else:
        await send_menu(chat_id, "üì≠ *–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è!*", back_to=f"manage_campaign|{short_name}")
        return
    old_session_name = session_name
    new_session_name = f"{new_title} ({session_num})"
    sessions[new_session_name] = sessions.pop(old_session_name)
    global DATA_CHANGED
    DATA_CHANGED = True
    save_data()
    buttons = [
        ("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", f"save_history|{short_name}|{session_num}"),
        ("üîÑ –ü–µ—Ä–µ–ø–∏—Å–∞—Ç—å", f"rewrite_history|{short_name}|{session_num}"),
        ("üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", f"regenerate_title|{short_name}|{session_num}")
    ]
    text = (
        f"# ‚èπ –ù–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ\n"
        f"–°–µ—Å—Å–∏—è *{old_session_name}* –≤ *{DATA['campaigns'][short_name]['full_name']}* —Ç–µ–ø–µ—Ä—å –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è *{new_session_name}*:\n"
        f"_{sessions[new_session_name]['history'] if 'history' in sessions[new_session_name] else '–ó–∞–º–µ—Ç–∫–∏ –µ—â—ë –Ω–µ –ø–µ—Ä–µ—Å–∫–∞–∑–∞–Ω—ã'}_\n"
        f"*–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–µ—Ä–µ—Å–∫–∞–∑ –∏–ª–∏ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞?*"
    )
    await send_menu(chat_id, text, buttons, back_to=f"manage_campaign|{short_name}", buttons_per_row=2)

@bot.callback_query_handler(func=lambda call: call.data.startswith("save_history|"))
async def save_history(call):
    user_id = str(call.from_user.id)
    chat_id = call.message.chat.id
    parts = call.data.split("|")
    if len(parts) < 3:
        await send_menu(chat_id, "‚ùå *–û—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ!*")
        return
    short_name, session_num = parts[1], parts[2]
    if not await check_access(chat_id, user_id) or short_name not in DATA["campaigns"] or DATA["campaigns"][short_name]["creator"] != user_id:
        await send_menu(chat_id, "üö´ *–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é!*")
        return
    sessions = DATA["campaigns"][short_name]["sessions"]
    session_name = next((s for s in sessions if s.endswith(f"({session_num})")), None)
    if not session_name:
        await send_menu(chat_id, "‚ùå *–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!*", back_to=f"manage_campaign|{short_name}")
        return
    if "history" in sessions[session_name]:
        history = sessions[session_name]["history"]
        text = f"üìú –ò—Å—Ç–æ—Ä–∏—è –¥–ª—è *{session_name}* —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:\n_{history}_"
        await send_menu(chat_id, text, back_to=f"manage_campaign|{short_name}")
        return
    if "notes" in sessions[session_name]:
        all_notes = {note for char_id in DATA["campaigns"][short_name]["players"] for note in sessions[session_name]["notes"].get(char_id, [])}
        history = await generate_text(f"–°–æ—Å—Ç–∞–≤—å –∫—Ä–∞—Ç–∫—É—é —Ö—Ä–æ–Ω–∏–∫—É —Å–æ–±—ã—Ç–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–º–µ—Ç–æ–∫, –±–µ–∑ –≤—ã–¥—É–º–æ–∫:\n{'; '.join(all_notes)}", chat_id, is_dm=True)
        sessions[session_name]["history"] = history
        del sessions[session_name]["notes"]
        global DATA_CHANGED
        DATA_CHANGED = True
        save_data()
    else:
        await send_menu(chat_id, "üì≠ *–ù–µ—Ç –∑–∞–º–µ—Ç–æ–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏!*", back_to=f"manage_campaign|{short_name}")
        return
    buttons = [
        ("‚ñ∂Ô∏è –ù–æ–≤–∞—è", f"start_session|{short_name}"),
        ("üóë –£–¥–∞–ª–∏—Ç—å", f"delete_session|{short_name}")
    ]
    text = f"‚úÖ –ò—Å—Ç–æ—Ä–∏—è —Å–µ—Å—Å–∏–∏ *{session_name}* —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:\n_{history}_"
    await send_menu(chat_id, text, buttons, back_to=f"manage_campaign|{short_name}", buttons_per_row=2)

@bot.callback_query_handler(func=lambda call: call.data.startswith("rewrite_history|"))
async def rewrite_history(call):
    user_id = str(call.from_user.id)
    chat_id = call.message.chat.id
    parts = call.data.split("|")
    if len(parts) < 3:
        await send_menu(chat_id, "‚ùå *–û—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ!*")
        return
    short_name, session_num = parts[1], parts[2]
    if not await check_access(chat_id, user_id) or short_name not in DATA["campaigns"] or DATA["campaigns"][short_name]["creator"] != user_id:
        await send_menu(chat_id, "üö´ *–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é!*")
        return
    sessions = DATA["campaigns"][short_name]["sessions"]
    session_name = next((s for s in sessions if s.endswith(f"({session_num})")), None)
    if not session_name or "notes" not in sessions[session_name]:
        await send_menu(chat_id, "‚ùå *–ó–∞–º–µ—Ç–∫–∏ –¥–ª—è –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!*", back_to=f"manage_campaign|{short_name}")
        return
    all_notes = {note for char_id in DATA["campaigns"][short_name]["players"] for note in sessions[session_name]["notes"].get(char_id, [])}
    history = await generate_text(f"–°–æ—Å—Ç–∞–≤—å –∫—Ä–∞—Ç–∫—É—é —Ö—Ä–æ–Ω–∏–∫—É —Å–æ–±—ã—Ç–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–º–µ—Ç–æ–∫, –±–µ–∑ –≤—ã–¥—É–º–æ–∫:\n{'; '.join(all_notes)}", chat_id, is_dm=True)
    buttons = [
        ("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", f"save_history|{short_name}|{session_num}"),
        ("üîÑ –ü–µ—Ä–µ–ø–∏—Å–∞—Ç—å", f"rewrite_history|{short_name}|{session_num}")
    ]
    text = (
        f"# ‚èπ –ù–æ–≤—ã–π –ø–µ—Ä–µ—Å–∫–∞–∑\n"
        f"–°–µ—Å—Å–∏—è *{session_name}*:\n"
        f"_{history}_\n"
        f"*–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç–æ—Ç –ø–µ—Ä–µ—Å–∫–∞–∑?*"
    )
    await send_menu(chat_id, text, buttons, back_to=f"manage_campaign|{short_name}", buttons_per_row=2)

@bot.callback_query_handler(func=lambda call: call.data.startswith("delete_empty_session|"))
async def delete_empty_session(call):
    user_id, short_name, session_name = str(call.from_user.id), *call.data.split("|")[1:]
    if not await check_access(call.message.chat.id, user_id) or short_name not in DATA["campaigns"] or DATA["campaigns"][short_name]["creator"] != user_id:
        await send_menu(call.message.chat.id, "üö´ *–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å —Å–µ—Å—Å–∏—é!*")
        return
    sessions = DATA["campaigns"][short_name]["sessions"]
    if session_name in sessions and sessions[session_name]["active"]:
        del sessions[session_name]
        global DATA_CHANGED
        DATA_CHANGED = True
        buttons = [("‚ñ∂Ô∏è –ù–æ–≤–∞—è", f"start_session|{short_name}")]
        await send_menu(call.message.chat.id, f"üóë –ü—É—Å—Ç–∞—è —Å–µ—Å—Å–∏—è *{session_name}* —É–¥–∞–ª–µ–Ω–∞!", buttons, back_to=f"manage_campaign|{short_name}")
    else:
        await send_menu(call.message.chat.id, "üì≠ *–°–µ—Å—Å–∏—è —É–∂–µ —É–¥–∞–ª–µ–Ω–∞ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*", back_to=f"manage_campaign|{short_name}")

@bot.callback_query_handler(func=lambda call: call.data.startswith("delete_session|"))
async def delete_session(call):
    user_id, short_name = str(call.from_user.id), call.data.split("|")[1]
    if not await check_access(call.message.chat.id, user_id) or short_name not in DATA["campaigns"] or DATA["campaigns"][short_name]["creator"] != user_id:
        await send_menu(call.message.chat.id, "üö´ *–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å —Å–µ—Å—Å–∏—é!*")
        return
    sessions = DATA["campaigns"][short_name]["sessions"]
    if not sessions:
        await send_menu(call.message.chat.id, "üì≠ *–í –∫–∞–º–ø–∞–Ω–∏–∏ –Ω–µ—Ç —Å–µ—Å—Å–∏–π!*", back_to=f"manage_campaign|{short_name}")
        return
    last_session = list(sessions)[-1]
    if sessions[last_session]["active"]:
        await send_menu(call.message.chat.id, "üö´ *–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é!*", back_to=f"manage_campaign|{short_name}")
        return
    del sessions[last_session]
    global DATA_CHANGED
    DATA_CHANGED = True
    buttons = [("‚ñ∂Ô∏è –ù–æ–≤–∞—è", f"start_session|{short_name}")]
    await send_menu(call.message.chat.id, f"üóë –°–µ—Å—Å–∏—è *{last_session}* —É–¥–∞–ª–µ–Ω–∞!", buttons, back_to=f"manage_campaign|{short_name}")

@bot.callback_query_handler(func=lambda call: call.data.startswith("start_adding_notes|"))
async def start_adding_notes(call):
    user_id, short_name, session_num = str(call.from_user.id), *call.data.split("|")[1:]
    if not await check_access(call.message.chat.id, user_id) or short_name not in DATA["campaigns"]:
        await send_menu(call.message.chat.id, "üö´ *–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞!*")
        return
    session_name = f"–°–µ—Å—Å–∏—è {session_num}"
    sessions = DATA["campaigns"][short_name]["sessions"]
    if session_name not in sessions or not sessions[session_name]["active"]:
        await send_menu(call.message.chat.id, "‚è≥ *–°–µ—Å—Å–∏—è –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞ –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!*")
        return
    characters = [(cid, c["name"]) for cid, c in DATA["characters"].items() if c["owner"] == user_id and short_name in c["campaigns"]]
    if not characters:
        await send_menu(call.message.chat.id, "‚ùå *–£ —Ç–µ–±—è –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –≤ —ç—Ç–æ–π –∫–∞–º–ø–∞–Ω–∏–∏!*")
        return
    buttons = [(name, f"add_note_with_char|{short_name}|{session_num}|{cid}") for cid, name in characters]
    user_states[user_id] = {"state": "waiting_for_note_character", "data": {"short_name": short_name, "session_name": session_name}}
    text = f"üìù *–í—ã–±–µ—Ä–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫ –≤ '{session_name}':*"
    await send_menu(call.message.chat.id, text, buttons, buttons_per_row=2)

@bot.callback_query_handler(func=lambda call: call.data.startswith("add_note_with_char|"))
async def select_character_for_notes(call):
    user_id = str(call.from_user.id)
    parts = call.data.split("|")
    if len(parts) < 4:
        await send_menu(call.message.chat.id, "‚ùå *–û—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ!*")
        return
    short_name, session_num, character_id = parts[1], parts[2], parts[3]
    if user_id not in user_states or user_states[user_id]["state"] != "waiting_for_note_character":
        await send_menu(call.message.chat.id, "‚ùå *–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞!*")
        return
    if character_id not in DATA["characters"] or DATA["characters"][character_id]["owner"] != user_id:
        await send_menu(call.message.chat.id, "üö´ *–≠—Ç–æ –Ω–µ —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–∂!*")
        return
    session_name = f"–°–µ—Å—Å–∏—è {session_num}"
    user_states[user_id] = {"state": "waiting_for_notes", "data": {"short_name": short_name, "session_name": session_name, "character_id": character_id}}
    buttons = [("üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å", f"finish_adding_notes|{short_name}")]
    text = f"üìù *–ü–∏—à–∏ –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è '{DATA['characters'][character_id]['name']}' –≤ '{session_name}' –≤ '{DATA['campaigns'][short_name]['full_name']}':*"
    await send_menu(call.message.chat.id, text, buttons)

@bot.message_handler(func=lambda message: str(message.from_user.id) in user_states and user_states[str(message.from_user.id)].get("state") == "waiting_for_notes")
async def add_note_input(message):
    global DATA_CHANGED
    user_id = str(message.from_user.id)
    if not await check_access(message.chat.id, user_id):
        del user_states[user_id]
        return
    short_name = user_states[user_id]["data"]["short_name"]
    session_name = user_states[user_id]["data"]["session_name"]
    character_id = user_states[user_id]["data"]["character_id"]
    note = message.text.strip()
    buttons = [("üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å", f"finish_adding_notes|{short_name}")]
    if not note:
        await send_menu(message.chat.id, "‚ùå *–£–∫–∞–∂–∏ –∑–∞–º–µ—Ç–∫—É!* –ü—Ä–æ–¥–æ–ª–∂–∞–π:", buttons)
    else:
        sessions = DATA["campaigns"][short_name]["sessions"]
        sessions[session_name]["notes"].setdefault(character_id, []).append(note)
        DATA_CHANGED = True
        await send_menu(message.chat.id, f"‚úÖ –ó–∞–º–µ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ *{session_name}* –¥–ª—è *{DATA['characters'][character_id]['name']}*! –ü—Ä–æ–¥–æ–ª–∂–∞–π:", buttons)

@bot.callback_query_handler(func=lambda call: call.data.startswith("finish_adding_notes|"))
async def finish_adding_notes(call):
    user_id = str(call.from_user.id)
    parts = call.data.split("|")
    if len(parts) < 2:
        await send_menu(call.message.chat.id, "‚ùå *–û—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ!*")
        return
    short_name = parts[1]
    if not await check_access(call.message.chat.id, user_id):
        return
    sessions = DATA["campaigns"][short_name]["sessions"]
    active_session = next((s for s, d in sessions.items() if d["active"]), None)
    if not active_session:
        await send_menu(call.message.chat.id, "üì≠ *–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏!*")
        if user_id in user_states:
            del user_states[user_id]
        return
    characters = [cid for cid, c in DATA["characters"].items() if c["owner"] == user_id and short_name in c["campaigns"]]
    if not any(user_id == DATA["characters"][cid]["owner"] for cid in sessions[active_session]["notes"]):
        await send_menu(call.message.chat.id, "üì≠ *–£ —Ç–µ–±—è –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏!*")
        if user_id in user_states:
            del user_states[user_id]
        return
    char_notes = {cid: sessions[active_session]["notes"].get(cid, []) for cid in characters if cid in sessions[active_session]["notes"]}
    buttons = [(DATA["characters"][cid]["name"], f"finish_notes_for_char|{short_name}|{cid}") for cid in char_notes]
    text = f"üßô‚Äç‚ôÇÔ∏è *–í—ã–±–µ—Ä–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫ –≤ '{active_session}':*"
    await send_menu(call.message.chat.id, text, buttons, buttons_per_row=2)

@bot.callback_query_handler(func=lambda call: call.data.startswith("finish_notes_for_char|"))
async def finish_notes_for_character(call):
    user_id = str(call.from_user.id)
    parts = call.data.split("|")
    if len(parts) < 3:
        await send_menu(call.message.chat.id, "‚ùå *–û—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ!*")
        return
    short_name, character_id = parts[1], parts[2]
    if not await check_access(call.message.chat.id, user_id) or DATA["characters"][character_id]["owner"] != user_id:
        await send_menu(call.message.chat.id, "üö´ *–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∏–ª–∏ —ç—Ç–æ –Ω–µ —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–∂!*")
        return
    sessions = DATA["campaigns"][short_name]["sessions"]
    active_session = next((s for s, d in sessions.items() if d["active"]), None)
    if not active_session or character_id not in sessions[active_session]["notes"]:
        await send_menu(call.message.chat.id, "üì≠ *–ù–µ—Ç –∑–∞–º–µ—Ç–æ–∫ –¥–ª—è —ç—Ç–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!*")
        if user_id in user_states:
            del user_states[user_id]
        return
    notes = sessions[active_session]["notes"].get(character_id, [])
    history = await generate_text(f"–ü–µ—Ä–µ—Å–∫–∞–∂–∏ —ç—Ç–∏ —Å–æ–±—ã—Ç–∏—è –æ—Ç –ª–∏—Ü–∞ –≥–µ—Ä–æ—è –∫—Ä–∞—Ç–∫–æ, –±–µ–∑ —Å–ø–æ–π–ª–µ—Ä–æ–≤ –∏ –≤—ã–¥—É–º–æ–∫:\n{'; '.join(notes)}", call.message.chat.id)
    buttons = [
        ("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", f"save_player_history|{short_name}|{active_session}|{character_id}"),
        ("üîÑ –ü–µ—Ä–µ–ø–∏—Å–∞—Ç—å", f"rewrite_player_history|{short_name}|{active_session}|{character_id}"),
        ("üìú –ö–∞–º–ø–∞–Ω–∏—è", f"history|{short_name}"),
        ("üö™ –í—ã–π—Ç–∏", "leave_campaign")
    ]
    text = (
        f"# üèÅ –ó–∞–º–µ—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã\n"
        f"–î–ª—è *{DATA['characters'][character_id]['name']}*:\n"
        f"**–ü–µ—Ä–µ—Å–∫–∞–∑:**\n_{history}_\n"
        f"*–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –µ–≥–æ?*"
    )
    await send_menu(call.message.chat.id, text, buttons, buttons_per_row=2)
    if user_id in user_states:
        del user_states[user_id]

@bot.callback_query_handler(func=lambda call: call.data.startswith("history|"))
async def player_history(call):
    user_id, short_name = str(call.from_user.id), call.data.split("|")[1]
    if not await check_access(call.message.chat.id, user_id) or short_name not in DATA["campaigns"]:
        await send_menu(call.message.chat.id, "üö´ *–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞!*")
        return
    characters = [(cid, c["name"]) for cid, c in DATA["characters"].items() if c["owner"] == user_id and short_name in c["campaigns"]]
    if not characters:
        await send_menu(call.message.chat.id, "‚ùå *–£ —Ç–µ–±—è –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –≤ —ç—Ç–æ–π –∫–∞–º–ø–∞–Ω–∏–∏!*")
        return
    buttons = [
        ("üìú –û–±—â–∞—è", f"full_history_player|{short_name}"),
        ("üé• –ü–æ—Å–ª–µ–¥–Ω–∏–µ", f"last_sessions_player|{short_name}")
    ]
    text = f"# üìú –ò—Å—Ç–æ—Ä–∏—è –∫–∞–º–ø–∞–Ω–∏–∏\n*{DATA['campaigns'][short_name]['full_name']}*\n*–ß—Ç–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–ª—è —Ç–≤–æ–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π?*"
    await send_menu(call.message.chat.id, text, buttons, buttons_per_row=2)

@bot.callback_query_handler(func=lambda call: call.data.startswith("last_sessions_player|"))
async def last_sessions_player(call):
    user_id, short_name = str(call.from_user.id), call.data.split("|")[1]
    if not await check_access(call.message.chat.id, user_id) or short_name not in DATA["campaigns"]:
        await send_menu(call.message.chat.id, "üö´ *–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞!*")
        return
    characters = [cid for cid, c in DATA["characters"].items() if c["owner"] == user_id and short_name in c["campaigns"]]
    if not characters:
        await send_menu(call.message.chat.id, "‚ùå *–£ —Ç–µ–±—è –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –≤ —ç—Ç–æ–π –∫–∞–º–ø–∞–Ω–∏–∏!*")
        return
    sessions = list(DATA["campaigns"][short_name]["sessions"])
    last_three = sessions[-3:] if len(sessions) >= 3 else sessions
    if not last_three:
        await send_menu(call.message.chat.id, "üì≠ *–í –∫–∞–º–ø–∞–Ω–∏–∏ –Ω–µ—Ç —Å–µ—Å—Å–∏–π!*", back_to=f"history|{short_name}")
        return
    buttons = [(f"üé¨ {session}", f"session_history_player|{short_name}|{session.split('(')[-1].strip(')')}") for session in reversed(last_three)]
    text = f"# üé• –í –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–µ—Ä–∏—è—Ö\n*{DATA['campaigns'][short_name]['full_name']}*:"
    await send_menu(call.message.chat.id, text, buttons, back_to=f"history|{short_name}", buttons_per_row=2)

@bot.callback_query_handler(func=lambda call: call.data.startswith("save_player_history|"))
async def save_player_history(call):
    user_id = str(call.from_user.id)
    chat_id = call.message.chat.id
    parts = call.data.split("|")
    if len(parts) < 4:
        await send_menu(chat_id, "‚ùå *–û—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ!*")
        return
    short_name, session_num, character_id = parts[1], parts[2], parts[3]
    if not await check_access(chat_id, user_id) or short_name not in DATA["campaigns"] or DATA["characters"][character_id]["owner"] != user_id:
        await send_menu(chat_id, "üö´ *–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∏–ª–∏ —ç—Ç–æ –Ω–µ —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–∂!*")
        return
    sessions = DATA["campaigns"][short_name]["sessions"]
    session_name = next((s for s in sessions if s.endswith(f"({session_num})")), None)
    if not session_name:
        await send_menu(chat_id, "üì≠ *–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!*", back_to=f"history|{short_name}")
        return
    if "player_histories" in sessions[session_name] and character_id in sessions[session_name]["player_histories"]:
        history = sessions[session_name]["player_histories"][character_id]
        text = (
            f"# üìú –ò—Å—Ç–æ—Ä–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞\n"
            f"–î–ª—è *{DATA['characters'][character_id]['name']}* –≤ *{session_name}*:\n"
            f"_{history}_"
        )
        await send_menu(chat_id, text, back_to=f"history|{short_name}")
        return
    if "notes" in sessions[session_name] and sessions[session_name]["notes"].get(character_id, []):
        notes = sessions[session_name]["notes"].get(character_id, [])
        history = await generate_text(f"–ü–µ—Ä–µ—Å–∫–∞–∂–∏ —ç—Ç–∏ —Å–æ–±—ã—Ç–∏—è –æ—Ç –ª–∏—Ü–∞ –≥–µ—Ä–æ—è –∫—Ä–∞—Ç–∫–æ, –±–µ–∑ —Å–ø–æ–π–ª–µ—Ä–æ–≤ –∏ –≤—ã–¥—É–º–æ–∫:\n{'; '.join(notes)}", chat_id)
    elif "history" in sessions[session_name]:
        history = sessions[session_name]["history"]
    else:
        await send_menu(chat_id, "üì≠ *–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏!*", back_to=f"history|{short_name}")
        return
    if "player_histories" not in sessions[session_name]:
        sessions[session_name]["player_histories"] = {}
    sessions[session_name]["player_histories"][character_id] = history
    global DATA_CHANGED
    DATA_CHANGED = True
    save_data()
    buttons = [
        ("üìú –ö–∞–º–ø–∞–Ω–∏—è", f"history|{short_name}"),
        ("üö™ –í—ã–π—Ç–∏", "leave_campaign")
    ]
    text = (
        f"# ‚úÖ –ò—Å—Ç–æ—Ä–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞\n"
        f"–î–ª—è *{DATA['characters'][character_id]['name']}* –≤ *{session_name}*:\n"
        f"_{history}_"
    )
    await send_menu(chat_id, text, buttons, buttons_per_row=2)

@bot.callback_query_handler(func=lambda call: call.data.startswith("rewrite_player_history|"))
async def rewrite_player_history(call):
    user_id = str(call.from_user.id)
    chat_id = call.message.chat.id
    parts = call.data.split("|")
    if len(parts) < 4:
        await send_menu(chat_id, "‚ùå *–û—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ!*")
        return
    short_name, session_num, character_id = parts[1], parts[2], parts[3]
    if not await check_access(chat_id, user_id) or short_name not in DATA["campaigns"] or DATA["characters"][character_id]["owner"] != user_id:
        await send_menu(chat_id, "üö´ *–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∏–ª–∏ —ç—Ç–æ –Ω–µ —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–∂!*")
        return
    sessions = DATA["campaigns"][short_name]["sessions"]
    session_name = next((s for s in sessions if s.endswith(f"({session_num})")), None)
    if not session_name or character_id not in sessions[session_name]["notes"]:
        await send_menu(chat_id, "üì≠ *–ù–µ—Ç –∑–∞–º–µ—Ç–æ–∫ –¥–ª—è –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏—è!*")
        return
    notes = sessions[session_name]["notes"].get(character_id, [])
    history = await generate_text(f"–ü–µ—Ä–µ—Å–∫–∞–∂–∏ —ç—Ç–∏ —Å–æ–±—ã—Ç–∏—è –æ—Ç –ª–∏—Ü–∞ –≥–µ—Ä–æ—è –∫—Ä–∞—Ç–∫–æ, –±–µ–∑ —Å–ø–æ–π–ª–µ—Ä–æ–≤ –∏ –≤—ã–¥—É–º–æ–∫:\n{'; '.join(notes)}", chat_id)
    buttons = [
        ("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", f"save_player_history|{short_name}|{session_num}|{character_id}"),
        ("üîÑ –ü–µ—Ä–µ–ø–∏—Å–∞—Ç—å", f"rewrite_player_history|{short_name}|{session_num}|{character_id}"),
        ("üìú –ö–∞–º–ø–∞–Ω–∏—è", f"history|{short_name}"),
        ("üö™ –í—ã–π—Ç–∏", "leave_campaign")
    ]
    text = (
        f"# üèÅ –ù–æ–≤—ã–π –ø–µ—Ä–µ—Å–∫–∞–∑\n"
        f"–î–ª—è *{DATA['characters'][character_id]['name']}* –≤ *{session_name}*:\n"
        f"_{history}_\n"
        f"*–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç–æ—Ç –ø–µ—Ä–µ—Å–∫–∞–∑?*"
    )
    await send_menu(chat_id, text, buttons, buttons_per_row=2)

@bot.callback_query_handler(func=lambda call: call.data.startswith("session_history_player|"))
async def session_history_player(call):
    user_id = str(call.from_user.id)
    parts = call.data.split("|")
    if len(parts) < 3:
        await send_menu(call.message.chat.id, "‚ùå *–û—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ!*")
        return
    short_name, session_num = parts[1], parts[2]
    if not await check_access(call.message.chat.id, user_id):
        return
    sessions = DATA["campaigns"][short_name]["sessions"]
    session_name = next((s for s in sessions if s.endswith(f"({session_num})")), None)
    if not session_name:
        await send_menu(call.message.chat.id, "üì≠ *–¢–∞–∫–æ–π —Å–µ—Å—Å–∏–∏ –Ω–µ—Ç!*", back_to=f"last_sessions_player|{short_name}")
        return
    characters = [(cid, c["name"]) for cid, c in DATA["characters"].items() if c["owner"] == user_id and short_name in c["campaigns"]]
    if not characters:
        await send_menu(call.message.chat.id, "‚ùå *–£ —Ç–µ–±—è –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –≤ —ç—Ç–æ–π –∫–∞–º–ø–∞–Ω–∏–∏!*")
        return
    buttons = [(name, f"view_char_session|{short_name}|{session_num}|{cid}") for cid, name in characters]
    text = f"üìú # –í—ã–±–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–∞\n–ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –≤ '{session_name}':"
    await send_menu(call.message.chat.id, text, buttons, back_to=f"last_sessions_player|{short_name}", buttons_per_row=2)

@bot.callback_query_handler(func=lambda call: call.data.startswith("view_char_session|"))
async def view_character_session(call):
    user_id = str(call.from_user.id)
    parts = call.data.split("|")
    if len(parts) < 4:
        await send_menu(call.message.chat.id, "‚ùå *–û—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ!*")
        return
    short_name, session_num, character_id = parts[1], parts[2], parts[3]
    if not await check_access(call.message.chat.id, user_id) or DATA["characters"][character_id]["owner"] != user_id:
        await send_menu(call.message.chat.id, "üö´ *–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∏–ª–∏ —ç—Ç–æ –Ω–µ —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–∂!*")
        return
    sessions = DATA["campaigns"][short_name]["sessions"]
    session_name = next((s for s in sessions if s.endswith(f"({session_num})")), None)
    if not session_name:
        await send_menu(call.message.chat.id, "üì≠ *–¢–∞–∫–æ–π —Å–µ—Å—Å–∏–∏ –Ω–µ—Ç!*", back_to=f"last_sessions_player|{short_name}")
        return
    buttons = [("üìù –ó–∞–º–µ—Ç–∫–∏", f"session_notes_player|{short_name}|{session_num}|{character_id}")]
    has_player_history = "player_histories" in sessions[session_name] and character_id in sessions[session_name]["player_histories"]
    if has_player_history:
        history = sessions[session_name]["player_histories"][character_id]
    elif "notes" in sessions[session_name] and sessions[session_name]["notes"].get(character_id, []):
        notes = sessions[session_name]["notes"][character_id]
        history = await generate_text(f"–ü–µ—Ä–µ—Å–∫–∞–∂–∏ —ç—Ç–∏ —Å–æ–±—ã—Ç–∏—è –æ—Ç –ª–∏—Ü–∞ –≥–µ—Ä–æ—è –∫—Ä–∞—Ç–∫–æ, –±–µ–∑ —Å–ø–æ–π–ª–µ—Ä–æ–≤ –∏ –≤—ã–¥—É–º–æ–∫:\n{'; '.join(notes)}", call.message.chat.id)
        buttons.append(("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", f"save_player_history|{short_name}|{session_num}|{character_id}"))
    elif "history" in sessions[session_name]:
        history = sessions[session_name]["history"]
        buttons.append(("üíæ –ö–∞–∫ —Å–≤–æ—è", f"save_player_history|{short_name}|{session_num}|{character_id}"))
    else:
        await send_menu(call.message.chat.id, f"üì≠ –£ *{DATA['characters'][character_id]['name']}* –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫ –∏–ª–∏ –∏—Å—Ç–æ—Ä–∏–∏ –≤ *{session_name}*!", buttons, back_to=f"last_sessions_player|{short_name}")
        return
    text = (
        f"# üìú –ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞\n"
        f"*{DATA['characters'][character_id]['name']}* –≤ *{session_name}* (*{DATA['campaigns'][short_name]['full_name']}*):\n"
        f"_{history}_"
    )
    await send_menu(call.message.chat.id, text, buttons, back_to=f"last_sessions_player|{short_name}", buttons_per_row=2)

@bot.callback_query_handler(func=lambda call: call.data.startswith("session_notes_player|"))
async def session_notes_player(call):
    user_id = str(call.from_user.id)
    parts = call.data.split("|")
    if len(parts) < 4:
        await send_menu(call.message.chat.id, "‚ùå *–û—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ!*")
        return
    short_name, session_num, character_id = parts[1], parts[2], parts[3]
    if not await check_access(call.message.chat.id, user_id) or DATA["characters"][character_id]["owner"] != user_id:
        await send_menu(call.message.chat.id, "üö´ *–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∏–ª–∏ —ç—Ç–æ –Ω–µ —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–∂!*")
        return
    sessions = DATA["campaigns"][short_name]["sessions"]
    session_name = next((s for s in sessions if s.endswith(f"({session_num})")), None)
    if not session_name:
        await send_menu(call.message.chat.id, "üì≠ *–¢–∞–∫–æ–π —Å–µ—Å—Å–∏–∏ –Ω–µ—Ç!*", back_to=f"last_sessions_player|{short_name}")
        return
    if "notes" in sessions[session_name] and sessions[session_name]["notes"].get(character_id, []):
        notes = sessions[session_name]["notes"].get(character_id, [])
        text = (
            f"# üìù –ó–∞–º–µ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞\n"
            f"*{DATA['characters'][character_id]['name']}* –≤ *{session_name}* (*{DATA['campaigns'][short_name]['full_name']}*):\n"
            + "\n".join(f"- {note}" for note in notes)
        )
    elif "history" in sessions[session_name]:
        history = sessions[session_name]["history"]
        text = (
            f"# üìú –ó–∞–º–µ—Ç–∫–∏ —É–¥–∞–ª–µ–Ω—ã\n"
            f"–û–±—â–∞—è –∏—Å—Ç–æ—Ä–∏—è *{session_name}* –≤ *{DATA['campaigns'][short_name]['full_name']}*:\n"
            f"_{history}_"
        )
    else:
        text = f"üì≠ –£ *{DATA['characters'][character_id]['name']}* –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫ –∏–ª–∏ –∏—Å—Ç–æ—Ä–∏–∏ –≤ *{session_name}*!*"
    await send_menu(call.message.chat.id, text, back_to=f"last_sessions_player|{short_name}")

@bot.callback_query_handler(func=lambda call: call.data.startswith("full_history_player|"))
async def full_history_player(call):
    user_id = str(call.from_user.id)
    parts = call.data.split("|")
    if len(parts) < 2:
        await send_menu(call.message.chat.id, "‚ùå *–û—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ!*")
        return
    short_name = parts[1]
    if not await check_access(call.message.chat.id, user_id) or short_name not in DATA["campaigns"]:
        await send_menu(call.message.chat.id, "üö´ *–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞!*")
        return
    characters = [(cid, c["name"]) for cid, c in DATA["characters"].items() if c["owner"] == user_id and short_name in c["campaigns"]]
    if not characters:
        await send_menu(call.message.chat.id, "‚ùå *–£ —Ç–µ–±—è –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –≤ —ç—Ç–æ–π –∫–∞–º–ø–∞–Ω–∏–∏!*")
        return
    sessions = DATA["campaigns"][short_name]["sessions"]
    full_history = []
    for session_name, session_data in sessions.items():
        for cid, char_name in characters:
            if "player_histories" in session_data and cid in session_data["player_histories"]:
                full_history.append(f"**{session_name} ({char_name}):**\n_{session_data['player_histories'][cid]}_\n")
            elif "notes" in session_data and cid in session_data["notes"]:
                notes = session_data["notes"][cid]
                history = await generate_text(f"–ü–µ—Ä–µ—Å–∫–∞–∂–∏ —ç—Ç–∏ —Å–æ–±—ã—Ç–∏—è –æ—Ç –ª–∏—Ü–∞ –≥–µ—Ä–æ—è –∫—Ä–∞—Ç–∫–æ, –±–µ–∑ —Å–ø–æ–π–ª–µ—Ä–æ–≤ –∏ –≤—ã–¥—É–º–æ–∫:\n{'; '.join(notes)}", call.message.chat.id)
                full_history.append(f"**{session_name} ({char_name}):**\n_{history}_\n")
            elif "history" in session_data:
                history = session_data["history"]
                full_history.append(f"**{session_name} ({char_name}, –æ–±—â–∞—è):**\n_{history}_\n")
    if not full_history:
        await send_menu(call.message.chat.id, "üì≠ *–£ —Ç–≤–æ–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏ –∏–ª–∏ –∑–∞–º–µ—Ç–æ–∫ –≤ —ç—Ç–æ–π –∫–∞–º–ø–∞–Ω–∏–∏!*", back_to=f"history|{short_name}")
        return
    text = (
        f"# üìú –û–±—â–∞—è –∏—Å—Ç–æ—Ä–∏—è\n"
        f"–¢–≤–æ–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –≤ *{DATA['campaigns'][short_name]['full_name']}*:\n\n"
        + "\n".join(full_history)
    )
    await send_menu(call.message.chat.id, text, back_to=f"history|{short_name}", buttons_per_row=1)

@bot.callback_query_handler(func=lambda call: call.data.startswith("last_sessions_dm|"))
async def last_sessions_dm(call):
    user_id, short_name = str(call.from_user.id), call.data.split("|")[1]
    if not await check_access(call.message.chat.id, user_id) or short_name not in DATA["campaigns"] or DATA["campaigns"][short_name]["creator"] != user_id:
        await send_menu(call.message.chat.id, "üö´ *–¢—ã –Ω–µ —Å–æ–∑–¥–∞—Ç–µ–ª—å —ç—Ç–æ–π –∫–∞–º–ø–∞–Ω–∏–∏!*")
        return
    sessions = list(DATA["campaigns"][short_name]["sessions"])
    last_three = sessions[-3:] if len(sessions) >= 3 else sessions
    if not last_three:
        await send_menu(call.message.chat.id, "üì≠ *–í –∫–∞–º–ø–∞–Ω–∏–∏ –Ω–µ—Ç —Å–µ—Å—Å–∏–π!*", back_to=f"manage_campaign|{short_name}")
        return
    buttons = [(f"üé¨ {session}", f"session_history_dm|{short_name}|{session.split('(')[-1].strip(')')}") for session in reversed(last_three)]
    text = f"# üé• –í –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–µ—Ä–∏—è—Ö\n*{DATA['campaigns'][short_name]['full_name']}*:"
    await send_menu(call.message.chat.id, text, buttons, back_to=f"manage_campaign|{short_name}", buttons_per_row=2)

@bot.callback_query_handler(func=lambda call: call.data.startswith("session_history_dm|"))
async def session_history_dm(call):
    user_id = str(call.from_user.id)
    parts = call.data.split("|")
    if len(parts) < 3:
        await send_menu(call.message.chat.id, "‚ùå *–û—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ!*")
        return
    short_name, session_num = parts[1], parts[2]
    if not await check_access(call.message.chat.id, user_id):
        return
    sessions = DATA["campaigns"][short_name]["sessions"]
    session_name = next((s for s in sessions if s.endswith(f"({session_num})")), None)
    if not session_name:
        await send_menu(call.message.chat.id, "üì≠ *–¢–∞–∫–æ–π —Å–µ—Å—Å–∏–∏ –Ω–µ—Ç!*", back_to=f"last_sessions_dm|{short_name}")
        return
    buttons = [("üìù –ó–∞–º–µ—Ç–∫–∏", f"session_notes_dm|{short_name}|{session_num}")]
    if "history" in sessions[session_name]:
        history = sessions[session_name]["history"]
    elif "notes" in sessions[session_name]:
        all_notes = {f"{DATA['characters'][cid]['name']}: {n}" for cid in DATA["campaigns"][short_name]["players"] for n in sessions[session_name]["notes"].get(cid, [])}
        if not all_notes:
            await send_menu(call.message.chat.id, f"üì≠ –í *{session_name}* –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫!", buttons, back_to=f"last_sessions_dm|{short_name}")
            return
        history = await generate_text(f"–°–æ—Å—Ç–∞–≤—å –∫—Ä–∞—Ç–∫—É—é —Ö—Ä–æ–Ω–∏–∫—É —Å–æ–±—ã—Ç–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–º–µ—Ç–æ–∫, –±–µ–∑ –≤—ã–¥—É–º–æ–∫:\n{'; '.join(all_notes)}", call.message.chat.id, is_dm=True)
        buttons.append(("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", f"save_history|{short_name}|{session_num}"))
    else:
        await send_menu(call.message.chat.id, f"üì≠ –í *{session_name}* –Ω–µ—Ç –Ω–∏ –∑–∞–º–µ—Ç–æ–∫, –Ω–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏!", buttons, back_to=f"last_sessions_dm|{short_name}")
        return
    text = (
        f"# üìú –ò—Å—Ç–æ—Ä–∏—è\n"
        f"*{session_name}* –≤ *{DATA['campaigns'][short_name]['full_name']}*:\n"
        f"_{history}_"
    )
    await send_menu(call.message.chat.id, text, buttons, back_to=f"last_sessions_dm|{short_name}", buttons_per_row=2)

@bot.callback_query_handler(func=lambda call: call.data.startswith("session_notes_dm|"))
async def session_notes_dm(call):
    user_id = str(call.from_user.id)
    parts = call.data.split("|")
    if len(parts) < 3:
        await send_menu(call.message.chat.id, "‚ùå *–û—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ!*")
        return
    short_name, session_num = parts[1], parts[2]
    if not await check_access(call.message.chat.id, user_id):
        return
    sessions = DATA["campaigns"][short_name]["sessions"]
    session_name = next((s for s in sessions if s.endswith(f"({session_num})")), None)
    if not session_name:
        await send_menu(call.message.chat.id, "üì≠ *–¢–∞–∫–æ–π —Å–µ—Å—Å–∏–∏ –Ω–µ—Ç!*", back_to=f"last_sessions_dm|{short_name}")
        return
    if "notes" in sessions[session_name]:
        all_notes = {f"{DATA['characters'][cid]['name']}: {n}" for cid in DATA["campaigns"][short_name]["players"] for n in sessions[session_name]["notes"].get(cid, [])}
        if not all_notes:
            await send_menu(call.message.chat.id, f"üì≠ –í *{session_name}* –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫!", back_to=f"last_sessions_dm|{short_name}")
            return
        text = (
            f"# üìù –ó–∞–º–µ—Ç–∫–∏\n"
            f"*{session_name}* –≤ *{DATA['campaigns'][short_name]['full_name']}*:\n"
            + "\n".join(f"- {note}" for note in all_notes)
        )
    elif "history" in sessions[session_name]:
        text = (
            f"# üìú –ó–∞–º–µ—Ç–∫–∏ —É–¥–∞–ª–µ–Ω—ã\n"
            f"–°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è *{session_name}* –≤ *{DATA['campaigns'][short_name]['full_name']}*:\n"
            f"_{sessions[session_name]['history']}_"
        )
    else:
        text = f"üì≠ –í *{session_name}* –Ω–µ—Ç –Ω–∏ –∑–∞–º–µ—Ç–æ–∫, –Ω–∏ –∏—Å—Ç–æ—Ä–∏–∏!"
    await send_menu(call.message.chat.id, text, back_to=f"last_sessions_dm|{short_name}")

@bot.callback_query_handler(func=lambda call: call.data.startswith("dm_history|"))
async def dm_history(call):
    user_id = str(call.from_user.id)
    parts = call.data.split("|")
    if len(parts) < 2:
        await send_menu(call.message.chat.id, "‚ùå *–û—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ!*")
        return
    short_name = parts[1]
    if not await check_access(call.message.chat.id, user_id) or short_name not in DATA["campaigns"] or DATA["campaigns"][short_name]["creator"] != user_id:
        await send_menu(call.message.chat.id, "üö´ *–¢—ã –Ω–µ —Å–æ–∑–¥–∞—Ç–µ–ª—å —ç—Ç–æ–π –∫–∞–º–ø–∞–Ω–∏–∏!*")
        return
    sessions = DATA["campaigns"][short_name]["sessions"]
    full_history = []
    for session_name, session_data in sessions.items():
        if "history" in session_data:
            full_history.append(f"**{session_name}:**\n_{session_data['history']}_\n")
        elif "notes" in session_data:
            all_notes = {f"{DATA['characters'][cid]['name']}: {n}" for cid in DATA["campaigns"][short_name]["players"] for n in session_data["notes"].get(cid, [])}
            if all_notes:
                history = await generate_text(f"–°–æ—Å—Ç–∞–≤—å –∫—Ä–∞—Ç–∫—É—é —Ö—Ä–æ–Ω–∏–∫—É —Å–æ–±—ã—Ç–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–º–µ—Ç–æ–∫, –±–µ–∑ –≤—ã–¥—É–º–æ–∫:\n{'; '.join(all_notes)}", call.message.chat.id, is_dm=True)
                full_history.append(f"**{session_name}:**\n_{history}_\n")
    if not full_history:
        await send_menu(call.message.chat.id, "üì≠ *–í —ç—Ç–æ–π –∫–∞–º–ø–∞–Ω–∏–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏ –∏–ª–∏ –∑–∞–º–µ—Ç–æ–∫!*", back_to=f"manage_campaign|{short_name}")
        return
    text = (
        f"# üìú –ü–æ–ª–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è\n"
        f"*{DATA['campaigns'][short_name]['full_name']}*:\n\n"
        + "\n".join(full_history)
    )
    await send_menu(call.message.chat.id, text, back_to=f"manage_campaign|{short_name}", buttons_per_row=1)

@bot.callback_query_handler(func=lambda call: call.data == "main_menu")
async def back_to_main_menu(call):
    user_id = str(call.from_user.id)
    if await check_access(call.message.chat.id, user_id):
        await show_main_menu(call.message.chat.id, user_id)

async def periodic_save():
    while True:
        await asyncio.sleep(300)
        save_data()
        logging.info("–î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")

async def main():
    logging.info("Loading data...")
    load_data()
    logging.info("Starting bot...")
    async with aiohttp.ClientSession(connector=aiohttp.TCPConnector(ssl=False), timeout=aiohttp.ClientTimeout(total=60)) as session:
        bot.session = session
        asyncio.create_task(periodic_save())
        await bot.polling(non_stop=True, interval=1, timeout=20)

if __name__ == "__main__":
        asyncio.run(main())