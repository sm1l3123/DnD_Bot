import pytest
import asyncio
from unittest.mock import AsyncMock, MagicMock, patch
import main  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–≤–æ–π –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –∫–∞–∫ –º–æ–¥—É–ª—å


# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ–∏–∫—Å—Ç—É—Ä—É –¥–ª—è –±–æ—Ç–∞
@pytest.fixture
def bot():
    main.bot = MagicMock(spec=main.AsyncTeleBot)
    main.bot.send_message = AsyncMock()
    main.bot.send_chat_action = AsyncMock()
    return main.bot


# –§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º
@pytest.fixture(autouse=True)
def reset_globals():
    main.DATA = {"users": {}, "campaigns": {}, "admins": {}, "characters": {}}
    main.DATA_CHANGED = False
    main.CAMPAIGN_BY_CODE = {}
    main.user_states = {}


# –§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
@pytest.fixture
def setup_user(bot):
    main.DATA["users"]["67890"] = {"role": "player", "name": "TestUser", "password": "pass123"}
    main.DATA["users"]["11111"] = {"role": "dm", "name": "TestDM", "password": "dm123"}
    main.DATA["characters"]["char_1"] = {
        "name": "Grok",
        "owner": "67890",
        "campaigns": ["test_campaign"],
        "backstory": "A brave warrior"
    }
    main.DATA["campaigns"]["test_campaign"] = {
        "creator": "11111",
        "code": "ABC123",
        "players": ["char_1"],
        "sessions": {"–°–µ—Å—Å–∏—è 1": {"active": False, "notes": {"char_1": ["Test note"]}}},  # –ò–∑–º–µ–Ω–∏–ª–∏ active –Ω–∞ False
        "short_name": "test_campaign",
        "full_name": "Test Campaign"
    }
    main.DATA["campaigns"]["newcamp"] = {
        "creator": "11111",
        "code": "XYZ789",
        "players": [],
        "sessions": {},
        "short_name": "newcamp",
        "full_name": "New Campaign"
    }
    main.CAMPAIGN_BY_CODE["ABC123"] = "test_campaign"
    main.CAMPAIGN_BY_CODE["XYZ789"] = "newcamp"

# –¢–µ—Å—Ç /start
@pytest.mark.asyncio
async def test_send_welcome(bot):
    message = MagicMock()
    message.chat.id = 12345
    message.from_user.id = 67890

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
    await main.send_welcome(message)
    bot.send_message.assert_called_once()
    assert bot.send_message.call_args.args[
        1] == "üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!* –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è:"
    assert bot.send_message.call_args.kwargs["parse_mode"] == "Markdown"

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –º–æ–∫
    bot.send_message.reset_mock()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    main.DATA["users"]["67890"] = {
        "role": "player",
        "name": "TestUser",
        "password": "pass"
    }
    await main.send_welcome(message)
    bot.send_message.assert_called_once()
    assert bot.send_message.call_args.args[
        1] == "üë§ *–¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!* –í–æ–π–¥–∏:"
    assert bot.send_message.call_args.kwargs["parse_mode"] == "Markdown"


# –¢–µ—Å—Ç /admin
@pytest.mark.asyncio
async def test_admin_login(bot):
    message = MagicMock()
    message.chat.id = 12345
    message.from_user.id = 67890

    await main.admin_login(message)
    bot.send_message.assert_called_once()
    assert bot.send_message.call_args.args[1] == "üîí *–í–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∞:*"
    assert bot.send_message.call_args.kwargs["parse_mode"] == "Markdown"
    assert main.user_states["67890"]["state"] == "waiting_for_admin_password"


@pytest.mark.asyncio
async def test_handle_admin_password_input(bot):
    message = MagicMock()
    message.chat.id = 12345
    message.from_user.id = 67890
    message.text = "kikiriki1237"
    main.user_states["67890"] = {"state": "waiting_for_admin_password"}

    await main.handle_admin_password_input(message)
    assert main.DATA["admins"]["67890"] == True
    assert "67890" not in main.user_states


# –¢–µ—Å—Ç /exitadmin
@pytest.mark.asyncio
async def test_admin_logout(bot):
    message = MagicMock()
    message.chat.id = 12345
    message.from_user.id = 67890
    main.DATA["admins"]["67890"] = True

    await main.admin_logout(message)
    bot.send_message.assert_called_once()
    assert bot.send_message.call_args.args[
        1] == "üëã *–¢—ã –≤—ã—à–µ–ª –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏!*"
    assert bot.send_message.call_args.kwargs["parse_mode"] == "Markdown"
    assert main.DATA["admins"]["67890"] == False


# –¢–µ—Å—Ç show_admin_panel
@pytest.mark.asyncio
async def test_show_admin_panel(bot):
    main.DATA["admins"]["67890"] = True
    await main.show_admin_panel(12345, "67890")
    bot.send_message.assert_called_once()
    assert bot.send_message.call_args.args[
        1] == "# ‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n*–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!* –ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?"
    assert bot.send_message.call_args.kwargs["parse_mode"] == "Markdown"


# –¢–µ—Å—Ç handle_admin_commands (–ø—Ä–∏–º–µ—Ä –¥–ª—è users)
@pytest.mark.asyncio
async def test_handle_admin_commands_users(bot, setup_user):
    call = MagicMock()
    call.message.chat.id = 12345
    call.from_user.id = "67890"
    call.data = "admin_users"
    main.DATA["admins"]["67890"] = True

    await main.handle_admin_commands(call)
    bot.send_message.assert_called()


# –¢–µ—Å—Ç show_users_panel
@pytest.mark.asyncio
async def test_show_users_panel(bot, setup_user):
    main.DATA["admins"]["67890"] = True
    await main.show_users_panel(12345, "67890")
    bot.send_message.assert_called()


# –¢–µ—Å—Ç show_user_details
@pytest.mark.asyncio
async def test_show_user_details(bot, setup_user):
    main.DATA["admins"]["67890"] = True
    await main.show_user_details(12345, "67890", "67890")
    bot.send_message.assert_called()


# –¢–µ—Å—Ç reset_password_prompt
@pytest.mark.asyncio
async def test_reset_password_prompt(bot, setup_user):
    main.DATA["admins"]["67890"] = True
    await main.reset_password_prompt(12345, "67890", "67890")
    bot.send_message.assert_called_once()
    assert bot.send_message.call_args.args[
        1] == "üîë *–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è TestUser:*"
    assert bot.send_message.call_args.kwargs["parse_mode"] == "Markdown"
    assert main.user_states["67890"]["state"] == "waiting_for_reset_password"


# –¢–µ—Å—Ç reset_password_input
@pytest.mark.asyncio
async def test_reset_password_input(bot, setup_user):
    message = MagicMock()
    message.chat.id = 12345
    message.from_user.id = "67890"
    message.text = "newpass"
    main.DATA["admins"]["67890"] = True
    main.user_states["67890"] = {
        "state": "waiting_for_reset_password",
        "data": {
            "target_uid": "67890"
        }
    }

    await main.reset_password_input(message)
    bot.send_message.assert_called_once()
    assert bot.send_message.call_args.args[
        1] == "‚úÖ –ü–∞—Ä–æ–ª—å –¥–ª—è *TestUser* —Å–±—Ä–æ—à–µ–Ω –Ω–∞ `newpass`!"
    assert bot.send_message.call_args.kwargs["parse_mode"] == "Markdown"
    assert main.DATA["users"]["67890"]["password"] == "newpass"


# –¢–µ—Å—Ç delete_user
@pytest.mark.asyncio
async def test_delete_user(bot, setup_user):
    main.DATA["admins"]["67890"] = True
    await main.delete_user(12345, "67890", "67890")
    assert "67890" not in main.DATA["users"]


# –¢–µ—Å—Ç show_campaigns_panel
@pytest.mark.asyncio
async def test_show_campaigns_panel(bot, setup_user):
    main.DATA["admins"]["67890"] = True
    await main.show_campaigns_panel(12345, "67890")
    bot.send_message.assert_called()


# –¢–µ—Å—Ç show_campaign_details
@pytest.mark.asyncio
async def test_show_campaign_details(bot, setup_user):
    main.DATA["admins"]["67890"] = True
    await main.show_campaign_details(12345, "67890", "test_campaign")
    bot.send_message.assert_called()


# –¢–µ—Å—Ç delete_campaign
@pytest.mark.asyncio
async def test_delete_campaign(bot, setup_user):
    main.DATA["admins"]["67890"] = True
    await main.delete_campaign(12345, "67890", "test_campaign")
    assert "test_campaign" not in main.DATA["campaigns"]


# –¢–µ—Å—Ç handle_register_choice
@pytest.mark.asyncio
async def test_handle_register_choice(bot):
    call = MagicMock()
    call.message.chat.id = 12345
    call.from_user.id = 67890
    call.data = "register_dm"

    await main.handle_register_choice(call)
    bot.send_message.assert_called_once()
    assert bot.send_message.call_args.args[
        1] == "üìù *–í–≤–µ–¥–∏ –∏–º—è –∏ –ø–∞—Ä–æ–ª—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ò–º—è –ü–∞—Ä–æ–ª—å*\n–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω pass123"
    assert bot.send_message.call_args.kwargs["parse_mode"] == "Markdown"


# –¢–µ—Å—Ç ask_login
@pytest.mark.asyncio
async def test_ask_login(bot, setup_user):
    call = MagicMock()
    call.message.chat.id = 12345
    call.from_user.id = "67890"
    call.data = "login"

    await main.ask_login(call)
    bot.send_message.assert_called_once()
    assert bot.send_message.call_args.args[1] == "üîí *–í–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞:*"
    assert bot.send_message.call_args.kwargs["parse_mode"] == "Markdown"


# –¢–µ—Å—Ç show_main_menu
@pytest.mark.asyncio
async def test_show_main_menu(bot, setup_user):
    await main.show_main_menu(12345, "67890")
    bot.send_message.assert_called()


# –¢–µ—Å—Ç ask_join_campaign
@pytest.mark.asyncio
async def test_ask_join_campaign(bot, setup_user):
    call = MagicMock()
    call.message.chat.id = 12345
    call.from_user.id = "67890"
    call.data = "join_campaign"

    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ –µ—Å—Ç—å
    assert "67890" in main.DATA["users"]
    assert "char_1" in main.DATA["characters"]

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –º–æ–∫ –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º
    bot.send_message.reset_mock()

    await main.ask_join_campaign(call)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ send_message –≤—ã–∑–≤–∞–Ω —Ö–æ—Ç—è –±—ã —Ä–∞–∑
    assert bot.send_message.called
    # –ò—â–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤—ã–∑–æ–≤ —Å –Ω—É–∂–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö
    calls = bot.send_message.call_args_list
    assert any("üîë *–í–≤–µ–¥–∏ –∫–æ–¥ –∫–∞–º–ø–∞–Ω–∏–∏:*" in call.args[1] for call in calls)
    assert any(call.kwargs["parse_mode"] == "Markdown" for call in calls)
    assert main.user_states["67890"]["state"] == "waiting_for_campaign_code"


# –¢–µ—Å—Ç create_campaign_input
@pytest.mark.asyncio
async def test_create_campaign_input(bot):
    message = MagicMock()
    message.chat.id = 12345
    message.from_user.id = "11111"
    message.text = "newcamp New Campaign"
    main.DATA["users"]["11111"] = {
        "role": "dm",
        "name": "TestDM",
        "password": "dm123"
    }
    main.user_states["11111"] = {"state": "waiting_for_campaign_name"}

    await main.create_campaign_input(message)
    bot.send_message.assert_called()
    assert "newcamp" in main.DATA["campaigns"]

# –¢–µ—Å—Ç join_campaign_input
@pytest.mark.asyncio
async def test_join_campaign_input(bot, setup_user):
    message = MagicMock()
    message.chat.id = 12345
    message.from_user.id = "67890"
    message.text = "XYZ789"
    main.user_states["67890"] = {"state": "waiting_for_campaign_code"}

    await main.join_campaign_input(message)
    bot.send_message.assert_called()


# –¢–µ—Å—Ç join_with_character
@pytest.mark.asyncio
async def test_join_with_character(bot, setup_user):
    call = MagicMock()
    call.message.chat.id = 12345
    call.from_user.id = "67890"
    call.data = "join_with_char|newcamp|char_1"
    main.user_states["67890"] = {
        "state": "waiting_for_character_selection",
        "data": {
            "short_name": "newcamp"
        }
    }

    await main.join_with_character(call)
    bot.send_message.assert_called_once()
    assert bot.send_message.call_args.args[
        1] == "‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–∂ *Grok* –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ *New Campaign*!"
    assert bot.send_message.call_args.kwargs["parse_mode"] == "Markdown"
    assert "char_1" in main.DATA["campaigns"]["newcamp"]["players"]


# –¢–µ—Å—Ç leave_campaign
@pytest.mark.asyncio
async def test_leave_campaign(bot, setup_user):
    call = MagicMock()
    call.message.chat.id = 12345
    call.from_user.id = "67890"
    call.data = "leave_campaign"

    await main.leave_campaign(call)
    bot.send_message.assert_called()
    assert "char_1" not in main.DATA["campaigns"]["test_campaign"]["players"]


# –¢–µ—Å—Ç manage_campaign
@pytest.mark.asyncio
async def test_manage_campaign(bot, setup_user):
    call = MagicMock()
    call.message.chat.id = 12345
    call.from_user.id = "11111"
    call.data = "manage_campaign|test_campaign"

    await main.manage_campaign(call)
    bot.send_message.assert_called()


# –¢–µ—Å—Ç show_code
@pytest.mark.asyncio
async def test_show_code(bot, setup_user):
    call = MagicMock()
    call.message.chat.id = 12345
    call.from_user.id = "11111"
    call.data = "show_code|test_campaign"

    await main.show_code(call)
    bot.send_message.assert_called()


# –¢–µ—Å—Ç start_session
@pytest.mark.asyncio
async def test_start_session(bot, setup_user):
    call = MagicMock()
    call.message.chat.id = 12345
    call.from_user.id = "11111"
    call.data = "start_session|test_campaign"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Å—Å–∏–π
    initial_sessions = len(main.DATA["campaigns"]["test_campaign"]["sessions"])
    assert initial_sessions == 1  # –û–¥–Ω–∞ —Å–µ—Å—Å–∏—è —É–∂–µ –µ—Å—Ç—å –≤ —Ñ–∏–∫—Å—Ç—É—Ä–µ

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –º–æ–∫ –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º
    bot.send_message.reset_mock()

    await main.start_session(call)
    # –û–∂–∏–¥–∞–µ–º –¥–≤–∞ –≤—ã–∑–æ–≤–∞: –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞ –∏ –∏–≥—Ä–æ–∫–∞
    assert bot.send_message.call_count == 2
    calls = bot.send_message.call_args_list
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞
    assert any("‚ñ∂Ô∏è –°–µ—Å—Å–∏—è *–°–µ—Å—Å–∏—è 2* –≤ *Test Campaign* –Ω–∞—á–∞–ª–∞—Å—å!" in call.args[1] for call in calls)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤ –¥–ª—è –∏–≥—Ä–æ–∫–∞
    assert any("‚ñ∂Ô∏è –°–µ—Å—Å–∏—è *–°–µ—Å—Å–∏—è 2* –≤ –∫–∞–º–ø–∞–Ω–∏–∏ *Test Campaign* –Ω–∞—á–∞–ª–∞—Å—å!\n–î–æ–±–∞–≤–ª—è–π –∑–∞–º–µ—Ç–∫–∏ –∑–∞ *Grok*:" in call.args[1] for call in calls)
    assert all(call.kwargs["parse_mode"] == "Markdown" for call in calls)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
    assert len(main.DATA["campaigns"]["test_campaign"]["sessions"]) == initial_sessions + 1
    assert "–°–µ—Å—Å–∏—è 2" in main.DATA["campaigns"]["test_campaign"]["sessions"]
    assert main.DATA["campaigns"]["test_campaign"]["sessions"]["–°–µ—Å—Å–∏—è 2"]["active"] == True


# –¢–µ—Å—Ç end_session
@pytest.mark.asyncio
async def test_end_session(bot, setup_user):
    call = MagicMock()
    call.message.chat.id = 12345
    call.from_user.id = "11111"
    call.data = "end_session|test_campaign"

    with patch("main.generate_text",
               side_effect=[
                   AsyncMock(return_value="New Title"),
                   AsyncMock(return_value="Test history")
               ]):
        await main.end_session(call)
    bot.send_message.assert_called()


# –¢–µ—Å—Ç regenerate_title
@pytest.mark.asyncio
async def test_regenerate_title(bot, setup_user):
    call = MagicMock()
    call.message.chat.id = 12345
    call.from_user.id = "11111"
    call.data = "regenerate_title|test_campaign|1"
    main.DATA["campaigns"]["test_campaign"]["sessions"] = {
        "–°–µ—Å—Å–∏—è 1": {
            "active": False,
            "history": "Test history"
        }
    }

    with patch("main.generate_text", new=AsyncMock(return_value="New Title")):
        await main.regenerate_title(call)
    bot.send_message.assert_called()


# –¢–µ—Å—Ç save_history
@pytest.mark.asyncio
async def test_save_history(bot, setup_user):
    call = MagicMock()
    call.message.chat.id = 12345
    call.from_user.id = "11111"
    call.data = "save_history|test_campaign|1"

    with patch("main.generate_text",
               new=AsyncMock(return_value="Test history")):
        await main.save_history(call)
    bot.send_message.assert_called()


# –¢–µ—Å—Ç rewrite_history
@pytest.mark.asyncio
async def test_rewrite_history(bot, setup_user):
    call = MagicMock()
    call.message.chat.id = 12345
    call.from_user.id = "11111"
    call.data = "rewrite_history|test_campaign|1"

    with patch("main.generate_text",
               new=AsyncMock(return_value="New history")):
        await main.rewrite_history(call)
    bot.send_message.assert_called()


# –¢–µ—Å—Ç delete_empty_session
@pytest.mark.asyncio
async def test_delete_empty_session(bot, setup_user):
    call = MagicMock()
    call.message.chat.id = 12345
    call.from_user.id = "11111"
    call.data = "delete_empty_session|test_campaign|–°–µ—Å—Å–∏—è 2"
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é –¥–ª—è —Ç–µ—Å—Ç–∞
    main.DATA["campaigns"]["test_campaign"]["sessions"]["–°–µ—Å—Å–∏—è 2"] = {"active": True, "notes": {}}

    await main.delete_empty_session(call)
    bot.send_message.assert_called_once()
    assert "–°–µ—Å—Å–∏—è 2" not in main.DATA["campaigns"]["test_campaign"]["sessions"]


# –¢–µ—Å—Ç delete_session
@pytest.mark.asyncio
async def test_delete_session(bot, setup_user):
    call = MagicMock()
    call.message.chat.id = 12345
    call.from_user.id = "11111"
    call.data = "delete_session|test_campaign"
    main.DATA["campaigns"]["test_campaign"]["sessions"] = {
        "–°–µ—Å—Å–∏—è 1": {
            "active": False
        }
    }

    await main.delete_session(call)
    bot.send_message.assert_called()
    assert "–°–µ—Å—Å–∏—è 1" not in main.DATA["campaigns"]["test_campaign"][
        "sessions"]


# –¢–µ—Å—Ç start_adding_notes
@pytest.mark.asyncio
async def test_start_adding_notes(bot, setup_user):
    call = MagicMock()
    call.message.chat.id = 12345
    call.from_user.id = "67890"
    call.data = "start_adding_notes|test_campaign|1"

    await main.start_adding_notes(call)
    bot.send_message.assert_called()


# –¢–µ—Å—Ç select_character_for_notes
@pytest.mark.asyncio
async def test_select_character_for_notes(bot, setup_user):
    call = MagicMock()
    call.message.chat.id = 12345
    call.from_user.id = "67890"
    call.data = "add_note_with_char|test_campaign|1|char_1"
    main.user_states["67890"] = {
        "state": "waiting_for_note_character",
        "data": {
            "short_name": "test_campaign",
            "session_name": "–°–µ—Å—Å–∏—è 1"
        }
    }

    await main.select_character_for_notes(call)
    bot.send_message.assert_called()


# –¢–µ—Å—Ç add_note_input
@pytest.mark.asyncio
async def test_add_note_input(bot, setup_user):
    message = MagicMock()
    message.chat.id = 12345
    message.from_user.id = "67890"
    message.text = "New note"
    main.user_states["67890"] = {
        "state": "waiting_for_notes",
        "data": {
            "short_name": "test_campaign",
            "session_name": "–°–µ—Å—Å–∏—è 1",
            "character_id": "char_1"
        }
    }

    await main.add_note_input(message)
    bot.send_message.assert_called_once()
    assert bot.send_message.call_args.args[
        1] == "‚úÖ –ó–∞–º–µ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ *–°–µ—Å—Å–∏—è 1* –¥–ª—è *Grok*! –ü—Ä–æ–¥–æ–ª–∂–∞–π:"
    assert bot.send_message.call_args.kwargs["parse_mode"] == "Markdown"
    assert "New note" in main.DATA["campaigns"]["test_campaign"]["sessions"][
        "–°–µ—Å—Å–∏—è 1"]["notes"]["char_1"]


# –¢–µ—Å—Ç finish_adding_notes
@pytest.mark.asyncio
async def test_finish_adding_notes(bot, setup_user):
    call = MagicMock()
    call.message.chat.id = 12345
    call.from_user.id = "67890"
    call.data = "finish_adding_notes|test_campaign"

    await main.finish_adding_notes(call)
    bot.send_message.assert_called()


# –¢–µ—Å—Ç finish_notes_for_character
@pytest.mark.asyncio
async def test_finish_notes_for_character(bot, setup_user):
    call = MagicMock()
    call.message.chat.id = 12345
    call.from_user.id = "67890"
    call.data = "finish_notes_for_char|test_campaign|char_1"

    with patch("main.generate_text",
               new=AsyncMock(return_value="Test history")):
        await main.finish_notes_for_character(call)
    bot.send_message.assert_called()


# –¢–µ—Å—Ç history
@pytest.mark.asyncio
async def test_player_history(bot, setup_user):
    call = MagicMock()
    call.message.chat.id = 12345
    call.from_user.id = "67890"
    call.data = "history|test_campaign"

    await main.player_history(call)
    bot.send_message.assert_called()


# –¢–µ—Å—Ç last_sessions_player
@pytest.mark.asyncio
async def test_last_sessions_player(bot, setup_user):
    call = MagicMock()
    call.message.chat.id = 12345
    call.from_user.id = "67890"
    call.data = "last_sessions_player|test_campaign"
    main.DATA["campaigns"]["test_campaign"]["sessions"]["–°–µ—Å—Å–∏—è 1"][
        "active"] = False

    await main.last_sessions_player(call)
    bot.send_message.assert_called()


# –¢–µ—Å—Ç save_player_history
@pytest.mark.asyncio
async def test_save_player_history(bot, setup_user):
    call = MagicMock()
    call.message.chat.id = 12345
    call.from_user.id = "67890"
    call.data = "save_player_history|test_campaign|1|char_1"

    with patch("main.generate_text",
               new=AsyncMock(return_value="Test history")):
        await main.save_player_history(call)
    bot.send_message.assert_called()


# –¢–µ—Å—Ç rewrite_player_history
@pytest.mark.asyncio
async def test_rewrite_player_history(bot, setup_user):
    call = MagicMock()
    call.message.chat.id = 12345
    call.from_user.id = "67890"
    call.data = "rewrite_player_history|test_campaign|1|char_1"

    with patch("main.generate_text",
               new=AsyncMock(return_value="New history")):
        await main.rewrite_player_history(call)
    bot.send_message.assert_called()


# –¢–µ—Å—Ç session_history_player
@pytest.mark.asyncio
async def test_session_history_player(bot, setup_user):
    call = MagicMock()
    call.message.chat.id = 12345
    call.from_user.id = "67890"
    call.data = "session_history_player|test_campaign|1"

    await main.session_history_player(call)
    bot.send_message.assert_called()


# –¢–µ—Å—Ç view_character_session
@pytest.mark.asyncio
async def test_view_character_session(bot, setup_user):
    call = MagicMock()
    call.message.chat.id = 12345
    call.from_user.id = "67890"
    call.data = "view_char_session|test_campaign|1|char_1"

    with patch("main.generate_text",
               new=AsyncMock(return_value="Test history")):
        await main.view_character_session(call)
    bot.send_message.assert_called()


# –¢–µ—Å—Ç session_notes_player
@pytest.mark.asyncio
async def test_session_notes_player(bot, setup_user):
    call = MagicMock()
    call.message.chat.id = 12345
    call.from_user.id = "67890"
    call.data = "session_notes_player|test_campaign|1|char_1"

    await main.session_notes_player(call)
    bot.send_message.assert_called()


# –¢–µ—Å—Ç full_history_player
@pytest.mark.asyncio
async def test_full_history_player(bot, setup_user):
    call = MagicMock()
    call.message.chat.id = 12345
    call.from_user.id = "67890"
    call.data = "full_history_player|test_campaign"

    with patch("main.generate_text",
               new=AsyncMock(return_value="Test history")):
        await main.full_history_player(call)
    bot.send_message.assert_called()


# –¢–µ—Å—Ç last_sessions_dm
@pytest.mark.asyncio
async def test_last_sessions_dm(bot, setup_user):
    call = MagicMock()
    call.message.chat.id = 12345
    call.from_user.id = "11111"
    call.data = "last_sessions_dm|test_campaign"

    await main.last_sessions_dm(call)
    bot.send_message.assert_called()


# –¢–µ—Å—Ç session_history_dm
@pytest.mark.asyncio
async def test_session_history_dm(bot, setup_user):
    call = MagicMock()
    call.message.chat.id = 12345
    call.from_user.id = "11111"
    call.data = "session_history_dm|test_campaign|1"

    with patch("main.generate_text",
               new=AsyncMock(return_value="Test history")):
        await main.session_history_dm(call)
    bot.send_message.assert_called()


# –¢–µ—Å—Ç session_notes_dm
@pytest.mark.asyncio
async def test_session_notes_dm(bot, setup_user):
    call = MagicMock()
    call.message.chat.id = 12345
    call.from_user.id = "11111"
    call.data = "session_notes_dm|test_campaign|1"

    await main.session_notes_dm(call)
    bot.send_message.assert_called()


# –¢–µ—Å—Ç dm_history
@pytest.mark.asyncio
async def test_dm_history(bot, setup_user):
    call = MagicMock()
    call.message.chat.id = 12345
    call.from_user.id = "11111"
    call.data = "dm_history|test_campaign"

    with patch("main.generate_text",
               new=AsyncMock(return_value="Test history")):
        await main.dm_history(call)
    bot.send_message.assert_called()


# –¢–µ—Å—Ç back_to_main_menu
@pytest.mark.asyncio
async def test_back_to_main_menu(bot, setup_user):
    call = MagicMock()
    call.message.chat.id = 12345
    call.from_user.id = "67890"
    call.data = "main_menu"

    await main.back_to_main_menu(call)
    bot.send_message.assert_called()


# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if __name__ == "__main__":
    pytest.main(["-v", "--asyncio-mode=auto"])
