# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω—É–∂–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
import telebot
import json
import os
import random
import string
import requests
from telebot import types

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤ Replit
BOT_TOKEN = os.environ['BOT_TOKEN']
TOGETHER_API_KEY = os.environ['TOGETHER_API_KEY']
DATA_FILE = "dnd_data.json"
TOGETHER_API_URL = "https://api.together.xyz/v1/chat/completions"
ADMIN_PASSWORD = "kikiriki1237"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –∏ –¥–∞–Ω–Ω—ã–µ
bot = telebot.TeleBot(BOT_TOKEN)
DATA = {"users": {}, "campaigns": {}, "admins": {}}

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
def load_data():
    """üìÇ –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞."""
    global DATA
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r") as file:
            DATA = json.load(file)
    if "admins" not in DATA:
        DATA["admins"] = {}

# –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
def save_data():
    """üíæ –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª."""
    with open(DATA_FILE, "w") as file:
        json.dump(DATA, file, indent=2)

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ –∫–∞–º–ø–∞–Ω–∏–∏
def generate_code():
    """üîë –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–¥ –∏–∑ 6 —Å–∏–º–≤–æ–ª–æ–≤."""
    return ''.join(random.choices(string.ascii_uppercase + string.digits, k=6))

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ Together.ai
def generate_text(prompt, chat_id, is_dm=False, is_title=False):
    """üìú –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ DeepSeek-V3."""
    headers = {"Authorization": f"Bearer {TOGETHER_API_KEY}", "Content-Type": "application/json"}
    system_prompt = (
        "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞—ë—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –∏–∑ –¥–≤—É—Ö —Å–ª–æ–≤ (–º–∞–∫—Å–∏–º—É–º 20 —Å–∏–º–≤–æ–ª–æ–≤ —Å –Ω–æ–º–µ—Ä–æ–º) –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–º–µ—Ç–æ–∫. –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫—Ä–∞—Ç–∫–∏–º, –ª–æ–≥–∏—á–Ω—ã–º –∏ –æ—Ç—Ä–∞–∂–∞—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è –≤ –ø–æ—Ä—è–¥–∫–µ –∏—Ö —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –≤—ã–¥—É–º–∞–Ω–Ω—ã–µ –¥–µ—Ç–∞–ª–∏."
        if is_title else
        ("–¢—ã –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ—Å–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –æ—Ç –ª–∏—Ü–∞ –≥–µ—Ä–æ—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, —Å–æ—Ö—Ä–∞–Ω—è—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–∫–ª–æ–Ω–µ–Ω–∏—è, —Å–≤—è–∑–Ω–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞ –∏ —Å—Ç—Ä–æ–≥—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ–±—ã—Ç–∏–π –≤ –ø–æ—Ä—è–¥–∫–µ –∏—Ö –ø–æ—è–≤–ª–µ–Ω–∏—è, –±–µ–∑ —Å–∫–∞—á–∫–æ–≤ –∏ –≤—ã–¥—É–º–æ–∫. –ü–µ—Ä–µ—Å–∫–∞–∂–∏ –≤—Å—ë, —á—Ç–æ —É–∫–∞–∑–∞–Ω–æ, –∫—Ä–∞—Ç–∫–æ, –Ω–æ –ø–æ–ª–Ω–æ."
         if not is_dm else
         "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∫—Ä–∞—Ç–∫—É—é —Ö—Ä–æ–Ω–∏–∫—É —Å–æ–±—ã—Ç–∏–π –∫–∞–º–ø–∞–Ω–∏–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –≤ —Ç—Ä–µ—Ç—å–µ–º –ª–∏—Ü–µ, —Å–æ—Ö—Ä–∞–Ω—è—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–∫–ª–æ–Ω–µ–Ω–∏—è, —Å–≤—è–∑–Ω–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞ –∏ —Å—Ç—Ä–æ–≥—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ–±—ã—Ç–∏–π –≤ –ø–æ—Ä—è–¥–∫–µ –∏—Ö –ø–æ—è–≤–ª–µ–Ω–∏—è, –±–µ–∑ —Å–∫–∞—á–∫–æ–≤ –∏ –≤—ã–¥—É–º–æ–∫. –ü–µ—Ä–µ—Å–∫–∞–∂–∏ –≤—Å—ë, —á—Ç–æ —É–∫–∞–∑–∞–Ω–æ, –∫—Ä–∞—Ç–∫–æ, –Ω–æ –ø–æ–ª–Ω–æ.")
    )
    payload = {
        "model": "deepseek-ai/DeepSeek-V3",
        "messages": [{"role": "system", "content": system_prompt}, {"role": "user", "content": prompt}],
        "max_tokens": 10 if is_title else 500000,
        "temperature": 0.5,
        "top_p": 0.9,
        "stream": True
    }
    try:
        bot.send_chat_action(chat_id, 'typing')
        response = requests.post(TOGETHER_API_URL, headers=headers, json=payload, stream=True, timeout=10)
        response.raise_for_status()
        full_text = ""
        for chunk in response.iter_lines():
            if chunk and (data := chunk.decode('utf-8').strip().removeprefix("data:").strip()) and data != "[DONE]":
                chunk_data = json.loads(data)
                if content := chunk_data.get("choices", [{}])[0].get("delta", {}).get("content", ""):
                    full_text += content
        return full_text.strip() or f"–û—à–∏–±–∫–∞: –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç. –ó–∞–º–µ—Ç–∫–∏: {prompt}"
    except requests.RequestException as e:
        return f"–û—à–∏–±–∫–∞ API: {str(e)}. –ó–∞–º–µ—Ç–∫–∏: {prompt}"
    except Exception as e:
        return f"–û—à–∏–±–∫–∞: {str(e)}. –ó–∞–º–µ—Ç–∫–∏: {prompt}"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def check_user(chat_id, user_id, allow_dm_only=False):
    """üîí –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –∏–º–µ–µ—Ç –ª–∏ –ø—Ä–∞–≤–∞."""
    if user_id not in DATA["users"]:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîë –í–æ–π—Ç–∏", callback_data="login"), types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu"))
        bot.send_message(chat_id, "‚ùå –¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!", reply_markup=markup)
        return False
    if allow_dm_only and DATA["users"][user_id]["role"] != "dm":
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu"))
        bot.send_message(chat_id, "üö´ –¢–æ–ª—å–∫–æ –º–∞—Å—Ç–µ—Ä –º–æ–∂–µ—Ç —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å!", reply_markup=markup)
        return False
    return True

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–¥–º–∏–Ω–∞
def check_admin(chat_id, user_id):
    """üîê –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º."""
    if user_id not in DATA["admins"] or not DATA["admins"][user_id]:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu"))
        bot.send_message(chat_id, "üö´ –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤! –ò—Å–ø–æ–ª—å–∑—É–π /admin", reply_markup=markup)
        return False
    return True

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    """üö™ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start."""
    user_id = str(message.from_user.id)
    markup = types.InlineKeyboardMarkup()
    if user_id in DATA["users"]:
        markup.add(types.InlineKeyboardButton("üîë –í–æ–π—Ç–∏", callback_data="login"))
        text = "üë§ –¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω! –í–æ–π–¥–∏:"
    else:
        markup.add(types.InlineKeyboardButton("üé≤ –ö–∞–∫ –º–∞—Å—Ç–µ—Ä", callback_data="register_dm"), types.InlineKeyboardButton("‚öîÔ∏è –ö–∞–∫ –∏–≥—Ä–æ–∫", callback_data="register_player"))
        text = "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è:"
    markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu"))
    bot.send_message(message.chat.id, text, reply_markup=markup)

# –í—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
@bot.message_handler(commands=['admin'])
def admin_login(message):
    """üîê –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å."""
    user_id = str(message.from_user.id)
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu"))
    bot.send_message(message.chat.id, "üîí –í–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∞:", reply_markup=markup)
    bot.register_next_step_handler_by_chat_id(message.chat.id, handle_admin_password)

def handle_admin_password(message):
    """üîê –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–∞—Ä–æ–ª—å –∏ –≤–∫–ª—é—á–∞–µ—Ç –∞–¥–º–∏–Ω-—Ä–µ–∂–∏–º."""
    user_id = str(message.from_user.id)
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu"))
    if message.text.strip() == ADMIN_PASSWORD:
        DATA["admins"][user_id] = True
        save_data()
        show_admin_panel(message.chat.id, user_id)
    else:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∞!", reply_markup=markup)

# –í—ã—Ö–æ–¥ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
@bot.message_handler(commands=['exitadmin'])
def admin_logout(message):
    """üö™ –í—ã—Ö–æ–¥ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏."""
    user_id = str(message.from_user.id)
    if user_id in DATA["admins"] and DATA["admins"][user_id]:
        DATA["admins"][user_id] = False
        save_data()
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu"))
        bot.send_message(message.chat.id, "üëã –¢—ã –≤—ã—à–µ–ª –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏!", reply_markup=markup)
    else:
        bot.send_message(message.chat.id, "‚ùå –¢—ã –Ω–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏!")

# –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
def show_admin_panel(chat_id, user_id):
    """‚öôÔ∏è –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å."""
    if not check_admin(chat_id, user_id):
        return
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users"))
    markup.add(types.InlineKeyboardButton("üè∞ –ö–∞–º–ø–∞–Ω–∏–∏", callback_data="admin_campaigns"))
    markup.add(types.InlineKeyboardButton("üö™ –í—ã–π—Ç–∏", callback_data="admin_exit"))
    bot.send_message(chat_id, "‚öôÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!\n–ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥
@bot.callback_query_handler(func=lambda call: call.data.startswith("admin_"))
def handle_admin_commands(call):
    """‚öôÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏."""
    user_id = str(call.from_user.id)
    if not check_admin(call.message.chat.id, user_id):
        return
    parts = call.data.split("|")
    command = parts[0].replace("admin_", "")

    if command == "users":
        show_users_panel(call.message.chat.id, user_id)
    elif command == "campaigns":
        show_campaigns_panel(call.message.chat.id, user_id)
    elif command == "exit":
        DATA["admins"][user_id] = False
        save_data()
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu"))
        bot.send_message(call.message.chat.id, "üëã –¢—ã –≤—ã—à–µ–ª –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏!", reply_markup=markup)
    elif command == "panel":
        show_admin_panel(call.message.chat.id, user_id)
    elif command == "user_details" and len(parts) > 1:
        target_uid = parts[1]
        show_user_details(call.message.chat.id, user_id, target_uid)
    elif command == "reset_password" and len(parts) > 1:
        target_uid = parts[1]
        reset_password_prompt(call.message.chat.id, user_id, target_uid)
    elif command == "delete_user" and len(parts) > 1:
        target_uid = parts[1]
        delete_user(call.message.chat.id, user_id, target_uid)
    elif command == "campaign_details" and len(parts) > 1:
        short_name = parts[1]
        show_campaign_details(call.message.chat.id, user_id, short_name)
    elif command == "delete_campaign" and len(parts) > 1:
        short_name = parts[1]
        delete_campaign(call.message.chat.id, user_id, short_name)

# –ü–∞–Ω–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def show_users_panel(chat_id, user_id):
    """üë§ –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    markup = types.InlineKeyboardMarkup()
    text = "üë§ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
    for uid, user in DATA["users"].items():
        campaigns = [c["full_name"] for c in DATA["campaigns"].values() if uid in c["players"]]
        text += f"ID: {uid} | –ò–º—è: {user['name']} | –†–æ–ª—å: {'–º–∞—Å—Ç–µ—Ä' if user['role'] == 'dm' else '–∏–≥—Ä–æ–∫'} | –ö–∞–º–ø–∞–Ω–∏–∏: {', '.join(campaigns) or '–Ω–µ—Ç'}\n"
        markup.add(types.InlineKeyboardButton(f"üë§ {user['name']}", callback_data=f"admin_user_details|{uid}"))
    markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel"))
    bot.send_message(chat_id, text, reply_markup=markup)

def show_user_details(chat_id, user_id, target_uid):
    """üë§ –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if not check_admin(chat_id, user_id):
        return
    user = DATA["users"].get(target_uid, {})
    if not user:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_users"))
        bot.send_message(chat_id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!", reply_markup=markup)
        return
    campaigns = [c["full_name"] for c in DATA["campaigns"].values() if target_uid in c["players"]]
    text = (f"üë§ –î–µ—Ç–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
            f"ID: {target_uid}\n"
            f"–ò–º—è: {user['name']}\n"
            f"–†–æ–ª—å: {'–º–∞—Å—Ç–µ—Ä' if user['role'] == 'dm' else '–∏–≥—Ä–æ–∫'}\n"
            f"–ü–∞—Ä–æ–ª—å: {user['password']}\n"
            f"–ö–∞–º–ø–∞–Ω–∏–∏: {', '.join(campaigns) or '–Ω–µ—Ç'}")
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîë –°–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å", callback_data=f"admin_reset_password|{target_uid}"))
    markup.add(types.InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data=f"admin_delete_user|{target_uid}"))
    markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_users"))
    bot.send_message(chat_id, text, reply_markup=markup)

def reset_password_prompt(chat_id, user_id, target_uid):
    """üîë –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å."""
    if not check_admin(chat_id, user_id):
        return
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"admin_user_details|{target_uid}"))
    bot.send_message(chat_id, f"üîë –í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è {DATA['users'][target_uid]['name']}:", reply_markup=markup)
    bot.register_next_step_handler_by_chat_id(chat_id, lambda msg: reset_password(msg, target_uid))

def reset_password(message, target_uid):
    """üîë –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = str(message.from_user.id)
    if not check_admin(message.chat.id, user_id):
        return
    new_password = message.text.strip()
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"admin_user_details|{target_uid}"))
    if not new_password:
        bot.send_message(message.chat.id, "‚ùå –ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!", reply_markup=markup)
        return
    DATA["users"][target_uid]["password"] = new_password
    save_data()
    bot.send_message(message.chat.id, f"‚úÖ –ü–∞—Ä–æ–ª—å –¥–ª—è {DATA['users'][target_uid]['name']} —Å–±—Ä–æ—à–µ–Ω –Ω–∞ '{new_password}'!", reply_markup=markup)

def delete_user(chat_id, user_id, target_uid):
    """üóë –£–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if not check_admin(chat_id, user_id):
        return
    if target_uid not in DATA["users"]:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_users"))
        bot.send_message(chat_id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!", reply_markup=markup)
        return
    user_name = DATA["users"][target_uid]["name"]
    for campaign in DATA["campaigns"].values():
        if target_uid in campaign["players"]:
            campaign["players"].remove(target_uid)
    del DATA["users"][target_uid]
    if target_uid in DATA["admins"]:
        del DATA["admins"][target_uid]
    save_data()
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_users"))
    bot.send_message(chat_id, f"üóë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} —É–¥–∞–ª—ë–Ω!", reply_markup=markup)

# –ü–∞–Ω–µ–ª—å –∫–∞–º–ø–∞–Ω–∏–π
def show_campaigns_panel(chat_id, user_id):
    """üè∞ –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞–º–ø–∞–Ω–∏–π."""
    markup = types.InlineKeyboardMarkup()
    text = "üè∞ –°–ø–∏—Å–æ–∫ –∫–∞–º–ø–∞–Ω–∏–π:\n"
    for short_name, camp in DATA["campaigns"].items():
        players = [DATA["users"][p]["name"] for p in camp["players"]]
        text += f"–ö—Ä–∞—Ç–∫–æ–µ: {short_name} | –ü–æ–ª–Ω–æ–µ: {camp['full_name']} | –°–æ–∑–¥–∞—Ç–µ–ª—å: {DATA['users'][camp['creator']]['name']} | –£—á–∞—Å—Ç–Ω–∏–∫–∏: {', '.join(players) or '–Ω–µ—Ç'}\n"
        markup.add(types.InlineKeyboardButton(f"üè∞ {short_name}", callback_data=f"admin_campaign_details|{short_name}"))
    markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel"))
    bot.send_message(chat_id, text, reply_markup=markup)

def show_campaign_details(chat_id, user_id, short_name):
    """üè∞ –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∫–∞–º–ø–∞–Ω–∏–∏."""
    if not check_admin(chat_id, user_id):
        return
    camp = DATA["campaigns"].get(short_name, {})
    if not camp:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_campaigns"))
        bot.send_message(chat_id, "‚ùå –ö–∞–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", reply_markup=markup)
        return
    players = [DATA["users"][p]["name"] for p in camp["players"]]
    sessions = len(camp["sessions"])
    text = (f"üè∞ –î–µ—Ç–∞–ª–∏ –∫–∞–º–ø–∞–Ω–∏–∏:\n"
            f"–ö—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {short_name}\n"
            f"–ü–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {camp['full_name']}\n"
            f"–°–æ–∑–¥–∞—Ç–µ–ª—å: {DATA['users'][camp['creator']]['name']} (ID: {camp['creator']})\n"
            f"–ö–æ–¥: {camp['code']}\n"
            f"–£—á–∞—Å—Ç–Ω–∏–∫–∏: {', '.join(players) or '–Ω–µ—Ç'}\n"
            f"–°–µ—Å—Å–∏–π: {sessions}")
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –∫–∞–º–ø–∞–Ω–∏—é", callback_data=f"admin_delete_campaign|{short_name}"))
    markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_campaigns"))
    bot.send_message(chat_id, text, reply_markup=markup)

def delete_campaign(chat_id, user_id, short_name):
    """üóë –£–¥–∞–ª—è–µ—Ç –∫–∞–º–ø–∞–Ω–∏—é."""
    if not check_admin(chat_id, user_id):
        return
    if short_name not in DATA["campaigns"]:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_campaigns"))
        bot.send_message(chat_id, "‚ùå –ö–∞–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", reply_markup=markup)
        return
    full_name = DATA["campaigns"][short_name]["full_name"]
    del DATA["campaigns"][short_name]
    save_data()
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_campaigns"))
    bot.send_message(chat_id, f"üóë –ö–∞–º–ø–∞–Ω–∏—è '{full_name}' —É–¥–∞–ª–µ–Ω–∞!", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@bot.callback_query_handler(func=lambda call: call.data in ["register_dm", "register_player"])
def handle_register_choice(call):
    """üé≠ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ä–æ–ª–∏."""
    user_id = str(call.from_user.id)
    if user_id in DATA["users"]:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîë –í–æ–π—Ç–∏", callback_data="login"), types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu"))
        bot.send_message(call.message.chat.id, "üë§ –¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!", reply_markup=markup)
        return
    role = "dm" if call.data == "register_dm" else "player"
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu"))
    bot.send_message(call.message.chat.id, "üìù –í–≤–µ–¥–∏ –∏–º—è –∏ –ø–∞—Ä–æ–ª—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ò–º—è –ü–∞—Ä–æ–ª—å\n–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω pass123", reply_markup=markup)
    bot.register_next_step_handler_by_chat_id(call.message.chat.id, lambda msg: register_user(msg, role))

def register_user(message, role):
    """üìã –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = str(message.from_user.id)
    markup = types.InlineKeyboardMarkup()
    try:
        name, password = message.text.split(" ", 1)
        if not (name and password):
            raise ValueError
        DATA["users"][user_id] = {"role": role, "name": name, "password": password}
        save_data()
        markup.add(types.InlineKeyboardButton("üîë –í–æ–π—Ç–∏", callback_data="login"))
        text = f"‚úÖ –¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ {'–º–∞—Å—Ç–µ—Ä' if role == 'dm' else '–∏–≥—Ä–æ–∫'}, {name}!\n–¢–µ–ø–µ—Ä—å –≤–æ–π–¥–∏."
    except ValueError:
        markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu"))
        text = "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏: –ò–º—è –ü–∞—Ä–æ–ª—å"
    markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu"))
    bot.send_message(message.chat.id, text, reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥–∞
@bot.callback_query_handler(func=lambda call: call.data == "login")
def ask_login(call):
    """üîë –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞."""
    user_id = str(call.from_user.id)
    if user_id not in DATA["users"]:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data="start"), types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu"))
        bot.send_message(call.message.chat.id, "‚ùå –¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω! –ù–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ:", reply_markup=markup)
        return
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu"))
    bot.send_message(call.message.chat.id, "üîí –í–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞:", reply_markup=markup)
    bot.register_next_step_handler_by_chat_id(call.message.chat.id, login_user)

def login_user(message):
    """üîì –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–∞—Ä–æ–ª—å –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é."""
    user_id = str(message.from_user.id)
    markup = types.InlineKeyboardMarkup()
    if user_id not in DATA["users"]:
        markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu"))
        bot.send_message(message.chat.id, "‚ùå –¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω! –ù–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ: /start", reply_markup=markup)
        return
    if DATA["users"][user_id]["password"] != message.text.strip():
        markup.add(types.InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="login"), types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu"))
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!", reply_markup=markup)
        return
    show_main_menu(message.chat.id, user_id)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def show_main_menu(chat_id, user_id):
    """üè† –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    role, name = DATA["users"][user_id]["role"], DATA["users"][user_id]["name"]
    markup = types.InlineKeyboardMarkup()
    if role == "dm":
        campaigns = [(c["short_name"], c["full_name"]) for c in DATA["campaigns"].values() if c["creator"] == user_id]
        text = f"üëã –ü—Ä–∏–≤–µ—Ç, {name}! –¢—ã –≤–æ—à—ë–ª –∫–∞–∫ –º–∞—Å—Ç–µ—Ä.\nüìú –¢–≤–æ–∏ –∫–∞–º–ø–∞–Ω–∏–∏: {', '.join(n for _, n in campaigns) or '–Ω–µ—Ç –∫–∞–º–ø–∞–Ω–∏–π'}.\n–ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?"
        for short_name, _ in campaigns:
            markup.add(types.InlineKeyboardButton(f"üè∞ –ü–µ—Ä–µ–π—Ç–∏ –∫ '{short_name}'", callback_data=f"manage_campaign|{short_name}"))
        markup.add(types.InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –∫–∞–º–ø–∞–Ω–∏—é", callback_data="new_campaign"), types.InlineKeyboardButton("‚öîÔ∏è –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫–∞–∫ –∏–≥—Ä–æ–∫", callback_data="join_campaign"))
    else:
        campaign = next(((n, c["full_name"]) for n, c in DATA["campaigns"].items() if user_id in c["players"]), None)
        text = f"üëã –ü—Ä–∏–≤–µ—Ç, {name}! –¢—ã –≤–æ—à—ë–ª –∫–∞–∫ –∏–≥—Ä–æ–∫.\nüè∞ –¢–µ–∫—É—â–∞—è –∫–∞–º–ø–∞–Ω–∏—è: {campaign[1] if campaign else '–Ω–µ—Ç –∫–∞–º–ø–∞–Ω–∏–∏'}."
        if campaign:
            markup.add(types.InlineKeyboardButton("üìú –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é", callback_data=f"history|{campaign[0]}"), types.InlineKeyboardButton("üö™ –í—ã–π—Ç–∏ –∏–∑ –∫–∞–º–ø–∞–Ω–∏–∏", callback_data="leave_campaign"))
        else:
            markup.add(types.InlineKeyboardButton("ü§ù –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–∞–º–ø–∞–Ω–∏–∏", callback_data="join_campaign"))
    markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu"))
    bot.send_message(chat_id, text, reply_markup=markup)

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏
@bot.callback_query_handler(func=lambda call: call.data == "new_campaign")
def ask_new_campaign(call):
    """‚ûï –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏."""
    user_id = str(call.from_user.id)
    if not check_user(call.message.chat.id, user_id, allow_dm_only=True):
        return
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu"))
    bot.send_message(call.message.chat.id, "üìù –í–≤–µ–¥–∏ –∫—Ä–∞—Ç–∫–æ–µ (–¥–æ 16 —Å–∏–º–≤–æ–ª–æ–≤) –∏ –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:\n–ü—Ä–∏–º–µ—Ä: –¢–µ—Å—Ç –û—á–µ–Ω—å –î–ª–∏–Ω–Ω–æ–µ –ù–∞–∑–≤–∞–Ω–∏–µ –ö–∞–º–ø–∞–Ω–∏–∏", reply_markup=markup)
    bot.register_next_step_handler_by_chat_id(call.message.chat.id, create_campaign)

def create_campaign(message):
    """üè∞ –°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é –∫–∞–º–ø–∞–Ω–∏—é."""
    user_id = str(message.from_user.id)
    if not check_user(message.chat.id, user_id):
        return
    markup = types.InlineKeyboardMarkup()
    try:
        short_name, *full_name_parts = message.text.split()
        full_name = " ".join(full_name_parts)
        if not (short_name and full_name and len(short_name) <= 16 and short_name not in DATA["campaigns"]):
            raise ValueError
        code = generate_code()
        DATA["campaigns"][short_name] = {"creator": user_id, "code": code, "players": [], "sessions": {}, "short_name": short_name, "full_name": full_name}
        save_data()
        markup.add(types.InlineKeyboardButton(f"üè∞ –ü–µ—Ä–µ–π—Ç–∏ –∫ '{short_name}'", callback_data=f"manage_campaign|{short_name}"))
        text = f"‚úÖ –ö–∞–º–ø–∞–Ω–∏—è '{full_name}' —Å–æ–∑–¥–∞–Ω–∞! –ö–æ–¥: {code}"
    except ValueError:
        markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu"))
        text = "‚ùå –í–≤–µ–¥–∏ –∫—Ä–∞—Ç–∫–æ–µ (–¥–æ 16 —Å–∏–º–≤–æ–ª–æ–≤) –∏ –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, –∫—Ä–∞—Ç–∫–æ–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º!\n–ü—Ä–∏–º–µ—Ä: –¢–µ—Å—Ç –û—á–µ–Ω—å –î–ª–∏–Ω–Ω–æ–µ –ù–∞–∑–≤–∞–Ω–∏–µ"
    markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu"))
    bot.send_message(message.chat.id, text, reply_markup=markup)

# –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–∞–º–ø–∞–Ω–∏–∏
@bot.callback_query_handler(func=lambda call: call.data == "join_campaign")
def ask_join_campaign(call):
    """ü§ù –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–æ–¥ –∫–∞–º–ø–∞–Ω–∏–∏."""
    user_id = str(call.from_user.id)
    if not check_user(call.message.chat.id, user_id):
        return
    if any(user_id in c["players"] for c in DATA["campaigns"].values()):
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üö™ –í—ã–π—Ç–∏", callback_data="leave_campaign"), types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu"))
        campaign = next(c["full_name"] for c in DATA["campaigns"].values() if user_id in c["players"])
        bot.send_message(call.message.chat.id, f"üè∞ –¢—ã —É–∂–µ –≤ '{campaign}'! –í—ã–π–¥–∏, —á—Ç–æ–±—ã —Å–º–µ–Ω–∏—Ç—å.", reply_markup=markup)
        return
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu"))
    bot.send_message(call.message.chat.id, "üîë –í–≤–µ–¥–∏ –∫–æ–¥ –∫–∞–º–ø–∞–Ω–∏–∏:", reply_markup=markup)
    bot.register_next_step_handler_by_chat_id(call.message.chat.id, join_campaign)

def join_campaign(message):
    """ü§ù –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ—Ç –∏–≥—Ä–æ–∫–∞ –∫ –∫–∞–º–ø–∞–Ω–∏–∏."""
    user_id = str(message.from_user.id)
    if not check_user(message.chat.id, user_id):
        return
    code = message.text.strip()
    campaign = next((n for n, c in DATA["campaigns"].items() if c["code"] == code), None)
    markup = types.InlineKeyboardMarkup()
    if not campaign:
        markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu"))
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥!", reply_markup=markup)
        return
    DATA["campaigns"][campaign]["players"].append(user_id)
    save_data()
    markup.add(types.InlineKeyboardButton("üìú –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é", callback_data=f"history|{campaign}"), types.InlineKeyboardButton("üö™ –í—ã–π—Ç–∏", callback_data="leave_campaign"))
    markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu"))
    bot.send_message(message.chat.id, f"‚úÖ –¢—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ '{DATA['campaigns'][campaign]['full_name']}'!", reply_markup=markup)

# –í—ã—Ö–æ–¥ –∏–∑ –∫–∞–º–ø–∞–Ω–∏–∏
@bot.callback_query_handler(func=lambda call: call.data == "leave_campaign")
def leave_campaign(call):
    """üö™ –í—ã–≤–æ–¥–∏—Ç –∏–≥—Ä–æ–∫–∞ –∏–∑ –∫–∞–º–ø–∞–Ω–∏–∏."""
    user_id = str(call.from_user.id)
    if not check_user(call.message.chat.id, user_id):
        return
    campaign = next((n for n, c in DATA["campaigns"].items() if user_id in c["players"]), None)
    if not campaign:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu"))
        bot.send_message(call.message.chat.id, "üè∞ –¢—ã –Ω–µ –≤ –∫–∞–º–ø–∞–Ω–∏–∏!", reply_markup=markup)
        return
    DATA["campaigns"][campaign]["players"].remove(user_id)
    save_data()
    show_main_menu(call.message.chat.id, user_id)

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–µ–π (DM)
@bot.callback_query_handler(func=lambda call: call.data.startswith("manage_campaign|"))
def manage_campaign(call):
    """‚öôÔ∏è –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–µ–π."""
    user_id, short_name = str(call.from_user.id), call.data.split("|")[1]
    if not check_user(call.message.chat.id, user_id) or short_name not in DATA["campaigns"] or DATA["campaigns"][short_name]["creator"] != user_id:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu"))
        bot.send_message(call.message.chat.id, "üö´ –¢—ã –Ω–µ —Å–æ–∑–¥–∞—Ç–µ–ª—å —ç—Ç–æ–π –∫–∞–º–ø–∞–Ω–∏–∏!", reply_markup=markup)
        return
    full_name = DATA["campaigns"][short_name]["full_name"]
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å —Å–µ—Å—Å–∏—é", callback_data=f"start_session|{short_name}"), types.InlineKeyboardButton("‚èπ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é", callback_data=f"end_session|{short_name}"))
    markup.add(types.InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–µ—Å—Å–∏—é", callback_data=f"delete_session|{short_name}"))
    markup.add(types.InlineKeyboardButton("üìú –ü–æ–ª–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è", callback_data=f"dm_history|{short_name}"), types.InlineKeyboardButton("üé• –í –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–µ—Ä–∏—è—Ö", callback_data=f"last_sessions_dm|{short_name}"))
    markup.add(types.InlineKeyboardButton("üîë –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–¥", callback_data=f"show_code|{short_name}"), types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu"))
    bot.send_message(call.message.chat.id, f"üè∞ –ö–∞–º–ø–∞–Ω–∏—è: '{full_name}'. –ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?", reply_markup=markup)

# –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–¥ –∫–∞–º–ø–∞–Ω–∏–∏
@bot.callback_query_handler(func=lambda call: call.data.startswith("show_code|"))
def show_code(call):
    """üîë –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–¥ –∫–∞–º–ø–∞–Ω–∏–∏ –º–∞—Å—Ç–µ—Ä—É."""
    user_id, short_name = str(call.from_user.id), call.data.split("|")[1]
    if not check_user(call.message.chat.id, user_id) or short_name not in DATA["campaigns"] or DATA["campaigns"][short_name]["creator"] != user_id:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu"))
        bot.send_message(call.message.chat.id, "üö´ –¢—ã –Ω–µ —Å–æ–∑–¥–∞—Ç–µ–ª—å —ç—Ç–æ–π –∫–∞–º–ø–∞–Ω–∏–∏!", reply_markup=markup)
        return
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"manage_campaign|{short_name}"))
    bot.send_message(call.message.chat.id, f"üîë –ö–æ–¥ –∫–∞–º–ø–∞–Ω–∏–∏ '{DATA['campaigns'][short_name]['full_name']}': **{DATA['campaigns'][short_name]['code']}**", reply_markup=markup)

# –ù–∞—á–∞–ª–æ —Å–µ—Å—Å–∏–∏
@bot.callback_query_handler(func=lambda call: call.data.startswith("start_session|"))
def start_session(call):
    """‚ñ∂Ô∏è –ù–∞—á–∏–Ω–∞–µ—Ç –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é."""
    user_id, short_name = str(call.from_user.id), call.data.split("|")[1]
    if not check_user(call.message.chat.id, user_id) or short_name not in DATA["campaigns"] or DATA["campaigns"][short_name]["creator"] != user_id:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu"))
        bot.send_message(call.message.chat.id, "üö´ –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å —Å–µ—Å—Å–∏—é!", reply_markup=markup)
        return
    sessions = DATA["campaigns"][short_name]["sessions"]
    if any(s["active"] for s in sessions.values()):
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚èπ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é", callback_data=f"end_session|{short_name}"), types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"manage_campaign|{short_name}"))
        bot.send_message(call.message.chat.id, "‚è≥ –£–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è!", reply_markup=markup)
        return
    session_num = len(sessions) + 1
    session_name = f"–°–µ—Å—Å–∏—è {session_num}"
    sessions[session_name] = {"active": True, "notes": {}}
    save_data()
    full_name = DATA["campaigns"][short_name]["full_name"]
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚èπ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é", callback_data=f"end_session|{short_name}"), types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"manage_campaign|{short_name}"))
    bot.send_message(call.message.chat.id, f"‚ñ∂Ô∏è –°–µ—Å—Å–∏—è '{session_name}' –≤ '{full_name}' –Ω–∞—á–∞–ª–∞—Å—å!", reply_markup=markup)
    for player_id in DATA["campaigns"][short_name]["players"]:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üìù –ù–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª—è—Ç—å –∑–∞–º–µ—Ç–∫–∏", callback_data=f"start_adding_notes|{short_name}|{session_num}"), types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu"))
        bot.send_message(player_id, f"‚ñ∂Ô∏è –°–µ—Å—Å–∏—è '{session_name}' –≤ –∫–∞–º–ø–∞–Ω–∏–∏ '{full_name}' –Ω–∞—á–∞–ª–∞—Å—å! –î–æ–±–∞–≤–ª—è–π –∑–∞–º–µ—Ç–∫–∏:", reply_markup=markup)

# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
@bot.callback_query_handler(func=lambda call: call.data.startswith("end_session|"))
def end_session(call):
    """‚èπ –ó–∞–≤–µ—Ä—à–∞–µ—Ç —Å–µ—Å—Å–∏—é –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ."""
    user_id, short_name = str(call.from_user.id), call.data.split("|")[1]
    if not check_user(call.message.chat.id, user_id) or short_name not in DATA["campaigns"] or DATA["campaigns"][short_name]["creator"] != user_id:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu"))
        bot.send_message(call.message.chat.id, "üö´ –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é!", reply_markup=markup)
        return
    sessions = DATA["campaigns"][short_name]["sessions"]
    active_session = next((s for s, d in sessions.items() if d["active"]), None)
    if not active_session:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"manage_campaign|{short_name}"))
        bot.send_message(call.message.chat.id, "‚è≥ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏!", reply_markup=markup)
        return
    all_notes = {note for notes in sessions[active_session]["notes"].values() for note in notes}
    if not all_notes:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚úÖ –î–∞", callback_data=f"delete_empty_session|{short_name}|{active_session}"), types.InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data=f"manage_campaign|{short_name}"))
        bot.send_message(call.message.chat.id, f"üì≠ –°–µ—Å—Å–∏—è '{active_session}' –ø—É—Å—Ç–∞—è. –£–¥–∞–ª–∏—Ç—å –µ—ë?", reply_markup=markup)
        return
    session_num = int(active_session.split()[1])
    new_title = generate_text(f"–°–æ–∑–¥–∞–π –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ –¥–≤—É—Ö —Å–ª–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–º–µ—Ç–æ–∫: {'; '.join(all_notes)}", call.message.chat.id, is_title=True)
    new_session_name = f"{new_title} ({session_num})"
    sessions[new_session_name] = sessions.pop(active_session)
    sessions[new_session_name]["active"] = False
    save_data()
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é", callback_data=f"start_session|{short_name}"), types.InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–µ—Å—Å–∏—é", callback_data=f"delete_session|{short_name}"))
    markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"manage_campaign|{short_name}"))
    bot.send_message(call.message.chat.id, f"‚èπ –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏ –Ω–∞–∑–≤–∞–Ω–∞ '{new_session_name}' –≤ '{DATA['campaigns'][short_name]['full_name']}'!", reply_markup=markup)

# –£–¥–∞–ª–µ–Ω–∏–µ –ø—É—Å—Ç–æ–π —Å–µ—Å—Å–∏–∏
@bot.callback_query_handler(func=lambda call: call.data.startswith("delete_empty_session|"))
def delete_empty_session(call):
    """üóë –£–¥–∞–ª—è–µ—Ç –ø—É—Å—Ç—É—é —Å–µ—Å—Å–∏—é."""
    user_id, short_name, session_name = str(call.from_user.id), *call.data.split("|")[1:]
    if not check_user(call.message.chat.id, user_id) or short_name not in DATA["campaigns"] or DATA["campaigns"][short_name]["creator"] != user_id:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu"))
        bot.send_message(call.message.chat.id, "üö´ –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å —Å–µ—Å—Å–∏—é!", reply_markup=markup)
        return
    sessions = DATA["campaigns"][short_name]["sessions"]
    markup = types.InlineKeyboardMarkup()
    if session_name in sessions and sessions[session_name]["active"]:
        del sessions[session_name]
        save_data()
        markup.add(types.InlineKeyboardButton("‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é", callback_data=f"start_session|{short_name}"))
        text = f"üóë –ü—É—Å—Ç–∞—è —Å–µ—Å—Å–∏—è '{session_name}' —É–¥–∞–ª–µ–Ω–∞!"
    else:
        markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"manage_campaign|{short_name}"))
        text = "üì≠ –°–µ—Å—Å–∏—è —É–∂–µ —É–¥–∞–ª–µ–Ω–∞ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
    markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"manage_campaign|{short_name}"))
    bot.send_message(call.message.chat.id, text, reply_markup=markup)

# –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–µ—Å—Å–∏–∏
@bot.callback_query_handler(func=lambda call: call.data.startswith("delete_session|"))
def delete_session(call):
    """üóë –£–¥–∞–ª—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—É—é —Å–µ—Å—Å–∏—é."""
    user_id, short_name = str(call.from_user.id), call.data.split("|")[1]
    if not check_user(call.message.chat.id, user_id) or short_name not in DATA["campaigns"] or DATA["campaigns"][short_name]["creator"] != user_id:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu"))
        bot.send_message(call.message.chat.id, "üö´ –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å —Å–µ—Å—Å–∏—é!", reply_markup=markup)
        return
    sessions = DATA["campaigns"][short_name]["sessions"]
    if not sessions:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"manage_campaign|{short_name}"))
        bot.send_message(call.message.chat.id, "üì≠ –í –∫–∞–º–ø–∞–Ω–∏–∏ –Ω–µ—Ç —Å–µ—Å—Å–∏–π!", reply_markup=markup)
        return
    last_session = list(sessions)[-1]
    if sessions[last_session]["active"]:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"manage_campaign|{short_name}"))
        bot.send_message(call.message.chat.id, "üö´ –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é!", reply_markup=markup)
        return
    del sessions[last_session]
    save_data()
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å —Å–µ—Å—Å–∏—é", callback_data=f"start_session|{short_name}"), types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"manage_campaign|{short_name}"))
    bot.send_message(call.message.chat.id, f"üóë –°–µ—Å—Å–∏—è '{last_session}' —É–¥–∞–ª–µ–Ω–∞!", reply_markup=markup)

# –ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫
@bot.callback_query_handler(func=lambda call: call.data.startswith("start_adding_notes|"))
def start_adding_notes(call):
    """üìù –ù–∞—á–∏–Ω–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫."""
    user_id, short_name, session_num = str(call.from_user.id), *call.data.split("|")[1:]
    if not check_user(call.message.chat.id, user_id) or short_name not in DATA["campaigns"] or user_id not in DATA["campaigns"][short_name]["players"]:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu"))
        bot.send_message(call.message.chat.id, "üö´ –¢—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—à—å –≤ —ç—Ç–æ–π –∫–∞–º–ø–∞–Ω–∏–∏!", reply_markup=markup)
        return
    session_name = f"–°–µ—Å—Å–∏—è {session_num}"
    if session_name not in DATA["campaigns"][short_name]["sessions"] or not DATA["campaigns"][short_name]["sessions"][session_name]["active"]:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu"))
        bot.send_message(call.message.chat.id, "‚è≥ –°–µ—Å—Å–∏—è –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞ –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!", reply_markup=markup)
        return
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"finish_adding_notes|{short_name}"))
    bot.send_message(call.message.chat.id, f"üìù –ü–∏—à–∏ —Å–≤–æ–∏ –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è '{session_name}' –≤ '{DATA['campaigns'][short_name]['full_name']}':", reply_markup=markup)
    bot.register_next_step_handler_by_chat_id(call.message.chat.id, lambda msg: add_note(msg, short_name, session_name))

def add_note(message, short_name, session_name):
    """üìù –î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–º–µ—Ç–∫—É."""
    user_id = str(message.from_user.id)
    if not check_user(message.chat.id, user_id):
        return
    note = message.text.strip()
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"finish_adding_notes|{short_name}"))
    if not note:
        bot.send_message(message.chat.id, "‚ùå –£–∫–∞–∂–∏ –∑–∞–º–µ—Ç–∫—É! –ü—Ä–æ–¥–æ–ª–∂–∞–π:", reply_markup=markup)
    else:
        sessions = DATA["campaigns"][short_name]["sessions"]
        sessions[session_name]["notes"].setdefault(user_id, []).append(note)
        save_data()
        bot.send_message(message.chat.id, f"‚úÖ –ó–∞–º–µ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ '{session_name}'! –ü—Ä–æ–¥–æ–ª–∂–∞–π:", reply_markup=markup)
    bot.register_next_step_handler_by_chat_id(message.chat.id, lambda msg: add_note(msg, short_name, session_name))

# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫
@bot.callback_query_handler(func=lambda call: call.data.startswith("finish_adding_notes|"))
def finish_adding_notes(call):
    """üèÅ –ó–∞–≤–µ—Ä—à–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫."""
    user_id, short_name = str(call.from_user.id), call.data.split("|")[1]
    if not check_user(call.message.chat.id, user_id):
        return
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üìú –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é", callback_data=f"history|{short_name}"), types.InlineKeyboardButton("üö™ –í—ã–π—Ç–∏", callback_data="leave_campaign"))
    markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu"))
    bot.send_message(call.message.chat.id, "üèÅ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!", reply_markup=markup)

# –ò—Å—Ç–æ—Ä–∏—è –∏–≥—Ä–æ–∫–∞
@bot.callback_query_handler(func=lambda call: call.data.startswith("history|"))
def player_history(call):
    """üìú –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –∏–≥—Ä–æ–∫–∞."""
    user_id, short_name = str(call.from_user.id), call.data.split("|")[1]
    if not check_user(call.message.chat.id, user_id) or short_name not in DATA["campaigns"] or user_id not in DATA["campaigns"][short_name]["players"]:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu"))
        bot.send_message(call.message.chat.id, "üö´ –¢—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—à—å –≤ —ç—Ç–æ–π –∫–∞–º–ø–∞–Ω–∏–∏!", reply_markup=markup)
        return
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üìú –û–±—â–∞—è –∏—Å—Ç–æ—Ä–∏—è", callback_data=f"full_history_player|{short_name}"), types.InlineKeyboardButton("üé• –í –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–µ—Ä–∏—è—Ö", callback_data=f"last_sessions_player|{short_name}"))
    markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu"))
    bot.send_message(call.message.chat.id, f"üìú –ò—Å—Ç–æ—Ä–∏—è –∫–∞–º–ø–∞–Ω–∏–∏ '{DATA['campaigns'][short_name]['full_name']}'. –ß—Ç–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å?", reply_markup=markup)

# –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–µ—Å—Å–∏–∏ (–∏–≥—Ä–æ–∫)
@bot.callback_query_handler(func=lambda call: call.data.startswith("last_sessions_player|"))
def last_sessions_player(call):
    """üé• –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å–µ—Å—Å–∏–∏ –¥–ª—è –∏–≥—Ä–æ–∫–∞."""
    user_id, short_name = str(call.from_user.id), call.data.split("|")[1]
    if not check_user(call.message.chat.id, user_id) or short_name not in DATA["campaigns"] or user_id not in DATA["campaigns"][short_name]["players"]:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu"))
        bot.send_message(call.message.chat.id, "üö´ –¢—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—à—å –≤ —ç—Ç–æ–π –∫–∞–º–ø–∞–Ω–∏–∏!", reply_markup=markup)
        return
    sessions = list(DATA["campaigns"][short_name]["sessions"])
    last_three = sessions[-3:] if len(sessions) >= 3 else sessions
    if not last_three:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"history|{short_name}"))
        bot.send_message(call.message.chat.id, "üì≠ –í –∫–∞–º–ø–∞–Ω–∏–∏ –Ω–µ—Ç —Å–µ—Å—Å–∏–π!", reply_markup=markup)
        return
    markup = types.InlineKeyboardMarkup()
    for session in reversed(last_three):
        session_num = session.split('(')[-1].strip(')')
        markup.add(types.InlineKeyboardButton(f"üé¨ {session}", callback_data=f"session_history_player|{short_name}|{session_num}"))
    markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"history|{short_name}"))
    bot.send_message(call.message.chat.id, f"üé• –í –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–µ—Ä–∏—è—Ö '{DATA['campaigns'][short_name]['full_name']}':", reply_markup=markup)

# –ò—Å—Ç–æ—Ä–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–µ—Å—Å–∏–∏ (–∏–≥—Ä–æ–∫)
@bot.callback_query_handler(func=lambda call: call.data.startswith("session_history_player|"))
def session_history_player(call):
    """üìú –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–µ—Å—Å–∏–∏ –¥–ª—è –∏–≥—Ä–æ–∫–∞."""
    user_id, short_name, session_num = str(call.from_user.id), *call.data.split("|")[1:]
    if not check_user(call.message.chat.id, user_id):
        return
    sessions = DATA["campaigns"][short_name]["sessions"]
    session_name = next((s for s in sessions if s.endswith(f"({session_num})")), None)
    if not session_name:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"last_sessions_player|{short_name}"))
        bot.send_message(call.message.chat.id, "üì≠ –¢–∞–∫–æ–π —Å–µ—Å—Å–∏–∏ –Ω–µ—Ç!", reply_markup=markup)
        return
    notes = sessions[session_name]["notes"].get(user_id, [])
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üìù –ó–∞–º–µ—Ç–∫–∏ —Å–µ—Å—Å–∏–∏", callback_data=f"session_notes_player|{short_name}|{session_num}"), types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"last_sessions_player|{short_name}"))
    if not notes:
        bot.send_message(call.message.chat.id, f"üì≠ –£ —Ç–µ–±—è –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫ –≤ '{session_name}'!", reply_markup=markup)
        return
    history = generate_text(f"–ü–µ—Ä–µ—Å–∫–∞–∂–∏ —ç—Ç–∏ —Å–æ–±—ã—Ç–∏—è –æ—Ç –ª–∏—Ü–∞ –≥–µ—Ä–æ—è –∫—Ä–∞—Ç–∫–æ, –±–µ–∑ —Å–ø–æ–π–ª–µ—Ä–æ–≤ –∏ –≤—ã–¥—É–º–æ–∫:\n{'; '.join(notes)}", call.message.chat.id)
    bot.send_message(call.message.chat.id, f"üìú –ò—Å—Ç–æ—Ä–∏—è '{session_name}' –≤ '{DATA['campaigns'][short_name]['full_name']}':\n{history}", reply_markup=markup)

# –ó–∞–º–µ—Ç–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–µ—Å—Å–∏–∏ (–∏–≥—Ä–æ–∫)
@bot.callback_query_handler(func=lambda call: call.data.startswith("session_notes_player|"))
def session_notes_player(call):
    """üìù –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–º–µ—Ç–∫–∏ —Å–µ—Å—Å–∏–∏ –¥–ª—è –∏–≥—Ä–æ–∫–∞."""
    user_id, short_name, session_num = str(call.from_user.id), *call.data.split("|")[1:]
    if not check_user(call.message.chat.id, user_id):
        return
    sessions = DATA["campaigns"][short_name]["sessions"]
    session_name = next((s for s in sessions if s.endswith(f"({session_num})")), None)
    if not session_name:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"last_sessions_player|{short_name}"))
        bot.send_message(call.message.chat.id, "üì≠ –¢–∞–∫–æ–π —Å–µ—Å—Å–∏–∏ –Ω–µ—Ç!", reply_markup=markup)
        return
    notes = sessions[session_name]["notes"].get(user_id, [])
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"last_sessions_player|{short_name}"))
    if not notes:
        bot.send_message(call.message.chat.id, f"üì≠ –£ —Ç–µ–±—è –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫ –≤ '{session_name}'!", reply_markup=markup)
        return
    bot.send_message(call.message.chat.id, f"üìù –ó–∞–º–µ—Ç–∫–∏ '{session_name}' –≤ '{DATA['campaigns'][short_name]['full_name']}':\n" + "\n".join(f"- {note}" for note in notes), reply_markup=markup)

# –û–±—â–∞—è –∏—Å—Ç–æ—Ä–∏—è –∏–≥—Ä–æ–∫–∞
@bot.callback_query_handler(func=lambda call: call.data.startswith("full_history_player|"))
def full_history_player(call):
    """üìú –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–±—â—É—é –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –∏–≥—Ä–æ–∫–∞."""
    user_id, short_name = str(call.from_user.id), call.data.split("|")[1]
    if not check_user(call.message.chat.id, user_id) or short_name not in DATA["campaigns"] or user_id not in DATA["campaigns"][short_name]["players"]:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu"))
        bot.send_message(call.message.chat.id, "üö´ –¢—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—à—å –≤ —ç—Ç–æ–π –∫–∞–º–ø–∞–Ω–∏–∏!", reply_markup=markup)
        return
    notes = {note for s in DATA["campaigns"][short_name]["sessions"].values() for note in s["notes"].get(user_id, [])}
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"history|{short_name}"))
    if not notes:
        bot.send_message(call.message.chat.id, "üì≠ –£ —Ç–µ–±—è –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫ –≤ —ç—Ç–æ–π –∫–∞–º–ø–∞–Ω–∏–∏!", reply_markup=markup)
        return
    history = generate_text(f"–ü–µ—Ä–µ—Å–∫–∞–∂–∏ —ç—Ç–∏ —Å–æ–±—ã—Ç–∏—è –æ—Ç –ª–∏—Ü–∞ –≥–µ—Ä–æ—è –∫—Ä–∞—Ç–∫–æ, –±–µ–∑ —Å–ø–æ–π–ª–µ—Ä–æ–≤ –∏ –≤—ã–¥—É–º–æ–∫:\n{'; '.join(notes)}", call.message.chat.id)
    bot.send_message(call.message.chat.id, f"üìú –¢–≤–æ—è –æ–±—â–∞—è –∏—Å—Ç–æ—Ä–∏—è –≤ '{DATA['campaigns'][short_name]['full_name']}':\n{history}", reply_markup=markup)

# –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–µ—Å—Å–∏–∏ (DM)
@bot.callback_query_handler(func=lambda call: call.data.startswith("last_sessions_dm|"))
def last_sessions_dm(call):
    """üé• –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å–µ—Å—Å–∏–∏ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞."""
    user_id, short_name = str(call.from_user.id), call.data.split("|")[1]
    if not check_user(call.message.chat.id, user_id) or short_name not in DATA["campaigns"] or DATA["campaigns"][short_name]["creator"] != user_id:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu"))
        bot.send_message(call.message.chat.id, "üö´ –¢—ã –Ω–µ —Å–æ–∑–¥–∞—Ç–µ–ª—å —ç—Ç–æ–π –∫–∞–º–ø–∞–Ω–∏–∏!", reply_markup=markup)
        return
    sessions = list(DATA["campaigns"][short_name]["sessions"])
    last_three = sessions[-3:] if len(sessions) >= 3 else sessions
    if not last_three:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"manage_campaign|{short_name}"))
        bot.send_message(call.message.chat.id, "üì≠ –í –∫–∞–º–ø–∞–Ω–∏–∏ –Ω–µ—Ç —Å–µ—Å—Å–∏–π!", reply_markup=markup)
        return
    markup = types.InlineKeyboardMarkup()
    for session in reversed(last_three):
        session_num = session.split('(')[-1].strip(')')
        markup.add(types.InlineKeyboardButton(f"üé¨ {session}", callback_data=f"session_history_dm|{short_name}|{session_num}"))
    markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"manage_campaign|{short_name}"))
    bot.send_message(call.message.chat.id, f"üé• –í –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–µ—Ä–∏—è—Ö '{DATA['campaigns'][short_name]['full_name']}':", reply_markup=markup)

# –ò—Å—Ç–æ—Ä–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–µ—Å—Å–∏–∏ (DM)
@bot.callback_query_handler(func=lambda call: call.data.startswith("session_history_dm|"))
def session_history_dm(call):
    """üìú –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–µ—Å—Å–∏–∏ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞."""
    user_id, short_name, session_num = str(call.from_user.id), *call.data.split("|")[1:]
    if not check_user(call.message.chat.id, user_id):
        return
    sessions = DATA["campaigns"][short_name]["sessions"]
    session_name = next((s for s in sessions if s.endswith(f"({session_num})")), None)
    if not session_name:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"last_sessions_dm|{short_name}"))
        bot.send_message(call.message.chat.id, "üì≠ –¢–∞–∫–æ–π —Å–µ—Å—Å–∏–∏ –Ω–µ—Ç!", reply_markup=markup)
        return
    all_notes = {f"{DATA['users'][u]['name']}: {n}" for u, notes in sessions[session_name]["notes"].items() for n in notes}
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üìù –ó–∞–º–µ—Ç–∫–∏ —Å–µ—Å—Å–∏–∏", callback_data=f"session_notes_dm|{short_name}|{session_num}"), types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"last_sessions_dm|{short_name}"))
    if not all_notes:
        bot.send_message(call.message.chat.id, f"üì≠ –í '{session_name}' –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫!", reply_markup=markup)
        return
    history = generate_text(f"–°–æ—Å—Ç–∞–≤—å –∫—Ä–∞—Ç–∫—É—é —Ö—Ä–æ–Ω–∏–∫—É —Å–æ–±—ã—Ç–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–º–µ—Ç–æ–∫, –±–µ–∑ –≤—ã–¥—É–º–æ–∫:\n{'; '.join(all_notes)}", call.message.chat.id, is_dm=True)
    bot.send_message(call.message.chat.id, f"üìú –ò—Å—Ç–æ—Ä–∏—è '{session_name}' –≤ '{DATA['campaigns'][short_name]['full_name']}':\n{history}", reply_markup=markup)

# –ó–∞–º–µ—Ç–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–µ—Å—Å–∏–∏ (DM)
@bot.callback_query_handler(func=lambda call: call.data.startswith("session_notes_dm|"))
def session_notes_dm(call):
    """üìù –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–º–µ—Ç–∫–∏ —Å–µ—Å—Å–∏–∏ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞."""
    user_id, short_name, session_num = str(call.from_user.id), *call.data.split("|")[1:]
    if not check_user(call.message.chat.id, user_id):
        return
    sessions = DATA["campaigns"][short_name]["sessions"]
    session_name = next((s for s in sessions if s.endswith(f"({session_num})")), None)
    if not session_name:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"last_sessions_dm|{short_name}"))
        bot.send_message(call.message.chat.id, "üì≠ –¢–∞–∫–æ–π —Å–µ—Å—Å–∏–∏ –Ω–µ—Ç!", reply_markup=markup)
        return
    all_notes = {f"{DATA['users'][u]['name']}: {n}" for u, notes in sessions[session_name]["notes"].items() for n in notes}
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"last_sessions_dm|{short_name}"))
    if not all_notes:
        bot.send_message(call.message.chat.id, f"üì≠ –í '{session_name}' –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫!", reply_markup=markup)
        return
    bot.send_message(call.message.chat.id, f"üìù –ó–∞–º–µ—Ç–∫–∏ '{session_name}' –≤ '{DATA['campaigns'][short_name]['full_name']}':\n" + "\n".join(f"- {note}" for note in all_notes), reply_markup=markup)

# –ü–æ–ª–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è (DM)
@bot.callback_query_handler(func=lambda call: call.data.startswith("dm_history|"))
def dm_history(call):
    """üìú –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞."""
    user_id, short_name = str(call.from_user.id), call.data.split("|")[1]
    if not check_user(call.message.chat.id, user_id) or short_name not in DATA["campaigns"] or DATA["campaigns"][short_name]["creator"] != user_id:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu"))
        bot.send_message(call.message.chat.id, "üö´ –¢—ã –Ω–µ —Å–æ–∑–¥–∞—Ç–µ–ª—å —ç—Ç–æ–π –∫–∞–º–ø–∞–Ω–∏–∏!", reply_markup=markup)
        return
    all_notes = {f"{DATA['users'][u]['name']}: {n}" for s in DATA["campaigns"][short_name]["sessions"].values() for u, notes in s["notes"].items() for n in notes}
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"manage_campaign|{short_name}"))
    if not all_notes:
        bot.send_message(call.message.chat.id, "üì≠ –í —ç—Ç–æ–π –∫–∞–º–ø–∞–Ω–∏–∏ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫!", reply_markup=markup)
        return
    history = generate_text(f"–°–æ—Å—Ç–∞–≤—å –∫—Ä–∞—Ç–∫—É—é —Ö—Ä–æ–Ω–∏–∫—É —Å–æ–±—ã—Ç–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–º–µ—Ç–æ–∫, –±–µ–∑ –≤—ã–¥—É–º–æ–∫:\n{'; '.join(all_notes)}", call.message.chat.id, is_dm=True)
    bot.send_message(call.message.chat.id, f"üìú –ü–æ–ª–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è '{DATA['campaigns'][short_name]['full_name']}':\n{history}", reply_markup=markup)

# –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@bot.callback_query_handler(func=lambda call: call.data == "main_menu")
def back_to_main_menu(call):
    """‚¨ÖÔ∏è –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    user_id = str(call.from_user.id)
    if check_user(call.message.chat.id, user_id):
        show_main_menu(call.message.chat.id, user_id)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
load_data()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling()